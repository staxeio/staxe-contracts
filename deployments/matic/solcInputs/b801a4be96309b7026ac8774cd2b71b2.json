{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/test/PerkTrackerTest.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../v3/interfaces/IPerkTrackerV3.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract PerkTrackerTest is IPerkTrackerV3 {\n  event PerkClaimed(address claimer, uint256 productionId, uint16 perkId, uint256 tokensBought);\n\n  IProductionEscrowV3 private escrow;\n  address private productionFactory;\n\n  constructor(address _productionFactory) {\n    productionFactory = _productionFactory;\n  }\n\n  function perkClaimed(\n    address claimer,\n    uint256 productionId,\n    uint16 perkId,\n    uint256 tokensBought\n  ) external override {\n    require(msg.sender == address(escrow), \"Can only be called by registered escrow\");\n    emit PerkClaimed(claimer, productionId, perkId, tokensBought);\n  }\n\n  function registerEscrow(IProductionEscrowV3 _escrow) external override {\n    require(msg.sender == productionFactory, \"Can only be set by production factory\");\n    require(address(escrow) == address(0), \"Escrow already registered\");\n    escrow = _escrow;\n  }\n}\n"
    },
    "contracts/v3/interfaces/IMembersV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IMembersV3 {\n  function isOrganizer(address sender) external view returns (bool);\n\n  function isApprover(address sender) external view returns (bool);\n\n  function isInvestor(address sender) external view returns (bool);\n\n  function isOrganizerDelegate(address sender, address organizer) external view returns (bool);\n}\n"
    },
    "contracts/v3/interfaces/IPerkTrackerV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./IProductionEscrowV3.sol\";\n\ninterface IPerkTrackerV3 {\n  function perkClaimed(\n    address claimer,\n    uint256 productionId,\n    uint16 perkId,\n    uint256 tokensBought\n  ) external;\n\n  function registerEscrow(IProductionEscrowV3 escrow) external;\n}\n"
    },
    "contracts/v3/interfaces/IPriceCalculationEngineV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./IProductionEscrowV3.sol\";\n\ninterface IPriceCalculationEngineV3 {\n  function calculateTokenPrice(\n    IProductionEscrowV3 escrow,\n    IProductionEscrowV3.ProductionData calldata production,\n    uint256 tokenBasePrice,\n    uint256 amount,\n    address buyer\n  ) external view returns (IERC20Upgradeable currency, uint256 price);\n}\n"
    },
    "contracts/v3/interfaces/IProductionEscrowV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\nimport \"./IProductionTokenTrackerV3.sol\";\nimport \"./IPriceCalculationEngineV3.sol\";\nimport \"./IPerkTrackerV3.sol\";\n\ninterface IProductionEscrowV3 is IProductionTokenTrackerV3 {\n  enum ProductionState {\n    EMPTY,\n    CREATED,\n    OPEN,\n    FINISHED,\n    DECLINED,\n    CANCELED,\n    CLOSED\n  }\n\n  struct Perk {\n    uint16 id;\n    uint16 total;\n    uint16 claimed;\n    uint256 minTokensRequired;\n  }\n\n  struct Purchase {\n    uint256 tokens;\n    uint256 price;\n  }\n\n  struct ProductionData {\n    uint256 id;\n    address creator;\n    uint256 totalSupply;\n    uint256 organizerTokens;\n    uint256 soldCounter;\n    uint256 maxTokensUnknownBuyer;\n    IERC20Upgradeable currency;\n    ProductionState state;\n    string dataHash;\n    uint256 crowdsaleEndDate;\n    uint256 productionEndDate;\n    uint8 platformSharePercentage;\n    IPerkTrackerV3 perkTracker;\n    IPriceCalculationEngineV3 priceCalculationEngine;\n  }\n\n  // --- Events ---\n\n  event StateChanged(ProductionState from, ProductionState to, address by);\n  event TokenBought(address buyer, uint256 amount, uint256 price, uint16 perkClaimed);\n  event FundingClaimed(uint256 amount, uint256 platformShare, address by);\n  event ProceedsDeposited(uint256 amount, address by);\n  event ProceedsClaimed(uint256 amount, address by);\n\n  // --- Functions ---\n\n  function getProductionData() external view returns (ProductionData memory);\n\n  function getProductionDataWithPerks()\n    external\n    view\n    returns (\n      ProductionData memory,\n      Perk[] memory,\n      uint256 fundsRaised,\n      uint256 proceedsEarned\n    );\n\n  function getTokenOwnerData(address tokenOwner)\n    external\n    view\n    returns (\n      uint256 balance,\n      Purchase[] memory purchases,\n      Perk[] memory perks,\n      uint256 proceedsClaimed,\n      uint256 proceedsAvailable\n    );\n\n  function getTokensAvailable() external view returns (uint256);\n\n  function getTokenPrice(uint256 amount, address buyer) external view returns (IERC20Upgradeable, uint256);\n\n  function approve(address approver) external;\n\n  function decline(address decliner) external;\n\n  function finish(\n    address caller,\n    bool isTrustedForwarder,\n    address platformTreasury\n  ) external;\n\n  function close(\n    address caller,\n    bool isTrustedForwarder,\n    address platformTreasury\n  ) external;\n\n  function pause(address caller) external;\n\n  function unpause(address caller) external;\n\n  function paused() external view returns (bool);\n\n  function cancel(address caller, uint256 newCloseDate) external;\n\n  function buyTokens(\n    address buyer,\n    uint256 amount,\n    uint256 price,\n    uint16 perk\n  ) external;\n\n  function depositProceeds(address caller, uint256 amount) external;\n\n  function transferProceeds(address tokenHolder) external returns (uint256 amount);\n\n  function transferFunding(address caller, address platformTreasury)\n    external\n    returns (uint256 amount, uint256 platformShare);\n}\n"
    },
    "contracts/v3/interfaces/IProductionsV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./IProductionEscrowV3.sol\";\n\ninterface IProductionsV3 {\n  event ProductionMinted(uint256 indexed id, address indexed creator, uint256 tokenSupply, address escrow);\n  event TokenBought(uint256 indexed id, address indexed buyer, uint256 amount, uint256 price, uint16 perkClaimed);\n  event FundingClaimed(uint256 indexed id, address indexed buyer, uint256 amount, uint256 platformShare);\n  event ProceedsDeposited(uint256 indexed id, address indexed creator, uint256 amount);\n  event ProceedsClaimed(uint256 indexed id, address indexed buyer, uint256 amount);\n\n  struct Escrow {\n    uint256 id;\n    IProductionEscrowV3 escrow;\n  }\n\n  struct Production {\n    uint256 id;\n    IProductionEscrowV3.ProductionData data;\n    IProductionEscrowV3.Perk[] perks;\n    IProductionEscrowV3 escrow;\n    uint256 fundsRaised;\n    uint256 proceedsEarned;\n    uint256 escrowBalance;\n    bool paused;\n  }\n\n  function isTrustedErc20Token(address candidate) external view returns (bool);\n\n  function mintProduction(\n    IProductionEscrowV3 escrow,\n    address creator,\n    uint256 totalAmount\n  ) external returns (uint256 id);\n\n  function getProduction(uint256 id) external view returns (Production memory);\n\n  function getTokenPrice(uint256 id, uint256 amount) external view returns (IERC20Upgradeable, uint256);\n\n  function getTokenPriceFor(\n    uint256 id,\n    uint256 amount,\n    address buyer\n  ) external view returns (IERC20Upgradeable, uint256);\n\n  function getTokenOwnerData(uint256 id, address tokenOwner)\n    external\n    view\n    returns (\n      uint256 balance,\n      IProductionEscrowV3.Purchase[] memory purchases,\n      IProductionEscrowV3.Perk[] memory perksOwned,\n      uint256 proceedsClaimed,\n      uint256 proceedsAvailable\n    );\n\n  function getProductionIdsByCreator(address creator) external view returns (uint256[] memory);\n\n  function approve(uint256 id) external;\n\n  function decline(uint256 id) external;\n\n  function finishCrowdsale(uint256 id) external;\n\n  function close(uint256 id) external;\n\n  function pause(uint256 id) external;\n\n  function unpause(uint256 id) external;\n\n  function cancel(uint256 id, uint256 newCloseDate) external;\n\n  function buyTokensWithCurrency(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external payable;\n\n  function buyTokensWithTokens(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external;\n\n  function buyTokensWithFiat(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external;\n\n  function depositProceedsInTokens(uint256 id, uint256 amount) external;\n\n  function depositProceedsInCurrency(uint256 id) external payable;\n\n  function transferProceeds(uint256 id) external;\n\n  function transferFunding(uint256 id) external;\n}\n"
    },
    "contracts/v3/interfaces/IProductionTokenTrackerV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface IProductionTokenTrackerV3 {\n  function onTokenTransfer(\n    IERC1155Upgradeable tokenContract,\n    uint256 tokenId,\n    address currentOwner,\n    address newOwner,\n    uint256 numTokens\n  ) external;\n}\n"
    },
    "contracts/v3/interfaces/IProductionTokenV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\nimport \"./IProductionTokenTrackerV3.sol\";\n\ninterface IProductionTokenV3 is IERC1155Upgradeable {\n  function mintToken(\n    IProductionTokenTrackerV3 owner,\n    uint256 id,\n    uint256 totalAmount\n  ) external;\n\n  function getTokenBalances(address buyer) external view returns (uint256[] memory tokenIds, uint256[] memory balances);\n}\n"
    },
    "contracts/v3/interfaces/IPurchaseProxyV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IPurchaseProxyV3 {\n  event PurchasePlaced(address indexed buyer, uint256 indexed tokenId, uint256 numTokens, uint16 perkId);\n  event PurchaseExecuted(\n    address indexed buyer,\n    uint256 indexed tokenId,\n    uint256 numTokens,\n    uint16 perkId,\n    address paymentToken,\n    uint256 price\n  );\n  event Deposit(address indexed buyer, uint256 tokenAmount, address tokenAddress);\n\n  struct Purchase {\n    uint256 tokenId;\n    uint256 numTokens;\n    uint16 perkId;\n  }\n\n  function placePurchase(\n    uint256 tokenId,\n    uint256 numTokens,\n    uint16 perkId\n  ) external;\n\n  function purchase(\n    uint256 tokenId,\n    uint256 numTokens,\n    uint16 perkId\n  ) external;\n\n  function depositTo(\n    address buyer,\n    uint256 tokenAmount,\n    address tokenAddress\n  ) external;\n\n  function withdraw(uint256 amount) external;\n\n  function withdrawAll() external;\n}\n"
    },
    "contracts/v3/interfaces/IWETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/v3/StaticPriceCalculationEngine.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\nimport \"./interfaces/IProductionEscrowV3.sol\";\nimport \"./interfaces/IPriceCalculationEngineV3.sol\";\n\ncontract StaticPriceCalculationEngine is IPriceCalculationEngineV3 {\n  function calculateTokenPrice(\n    IProductionEscrowV3,\n    IProductionEscrowV3.ProductionData calldata productionData,\n    uint256 tokenBasePrice,\n    uint256 amount,\n    address\n  ) external pure returns (IERC20Upgradeable currency, uint256 price) {\n    return (productionData.currency, amount * tokenBasePrice);\n  }\n}\n"
    },
    "contracts/v3/StaxeProductionEscrowV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./interfaces/IMembersV3.sol\";\nimport \"./interfaces/IProductionEscrowV3.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract StaxeProductionEscrowV3 is Ownable, IProductionEscrowV3, IERC1155Receiver, Pausable {\n  using EnumerableSet for EnumerableSet.UintSet;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  // --- Data ---\n\n  ProductionData public productionData;\n  uint256 public immutable tokenPrice;\n  IMembersV3 public immutable members;\n\n  Perk[] public perks;\n  mapping(address => uint16[]) public perksByOwner;\n  mapping(address => EnumerableSet.UintSet) private perkSetByOwner;\n\n  IERC1155Upgradeable private tokenContract;\n\n  uint256 public fundsRaised;\n  uint256 public proceedsEarned;\n  mapping(address => uint256) payoutPerTokenHolder;\n  mapping(address => uint256) private payoutPerTokenTracking;\n  mapping(address => Purchase[]) private purchasesByBuyer;\n\n  bool public refundable;\n\n  // --- Functions ---\n\n  constructor(\n    ProductionData memory _productionData,\n    Perk[] memory _perks,\n    uint256 _tokenPrice,\n    IMembersV3 _members\n  ) Ownable() {\n    productionData = _productionData;\n    for (uint16 i = 0; i < _perks.length; i++) {\n      perks.push(_perks[i]);\n    }\n    tokenPrice = _tokenPrice;\n    members = _members;\n  }\n\n  modifier hasState(ProductionState state) {\n    require(productionData.state == state, \"Not in required state\");\n    _;\n  }\n\n  modifier creatorOnly(address caller) {\n    require(\n      isCreatorOrDelegate(caller) || (refundable && members.isApprover(caller)),\n      \"Can only be called from creator or delegate\"\n    );\n    _;\n  }\n\n  // --- IProductionEscrowV3 functions ---\n\n  function getProductionData() external view override returns (ProductionData memory) {\n    return productionData;\n  }\n\n  function getProductionDataWithPerks()\n    external\n    view\n    override\n    returns (\n      ProductionData memory,\n      Perk[] memory,\n      uint256,\n      uint256\n    )\n  {\n    return (productionData, perks, fundsRaised, proceedsEarned);\n  }\n\n  function getTokensAvailable() external view hasState(ProductionState.OPEN) returns (uint256) {\n    return productionData.totalSupply - productionData.soldCounter;\n  }\n\n  function getTokenPrice(uint256 amount, address buyer) external view override returns (IERC20Upgradeable, uint256) {\n    return productionData.priceCalculationEngine.calculateTokenPrice(this, productionData, tokenPrice, amount, buyer);\n  }\n\n  function getTokenOwnerData(address tokenOwner)\n    external\n    view\n    override\n    returns (\n      uint256 balance,\n      Purchase[] memory purchases,\n      Perk[] memory perksOwned,\n      uint256 proceedsClaimed,\n      uint256 proceedsAvailable\n    )\n  {\n    balance = tokenContract.balanceOf(tokenOwner, productionData.id);\n    uint16[] memory ids = perksByOwner[tokenOwner];\n    uint256[] memory values = EnumerableSet.values(perkSetByOwner[tokenOwner]);\n    perksOwned = new Perk[](values.length);\n    for (uint16 i = 0; i < values.length; i++) {\n      uint16 id = uint16(values[i]);\n      Perk memory perk = perks[id - 1];\n      uint16 count = countIds(id, ids);\n      perksOwned[i] = Perk({id: id, total: perk.total, claimed: count, minTokensRequired: perk.minTokensRequired});\n    }\n    proceedsClaimed = payoutPerTokenHolder[tokenOwner];\n    proceedsAvailable = productionData.soldCounter > 0\n      ? ((balance * proceedsEarned) / productionData.soldCounter) - payoutPerTokenTracking[tokenOwner]\n      : 0;\n    return (balance, purchasesByBuyer[tokenOwner], perksOwned, proceedsClaimed, proceedsAvailable);\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // Lifecycle\n  // ---------------------------------------------------------------------------------------------\n\n  function approve(address approver) external override hasState(ProductionState.CREATED) onlyOwner {\n    require(members.isApprover(approver));\n    emit StateChanged(ProductionState.CREATED, ProductionState.OPEN, approver);\n    productionData.state = ProductionState.OPEN;\n  }\n\n  function decline(address decliner) external override hasState(ProductionState.CREATED) onlyOwner {\n    require(members.isApprover(decliner));\n    emit StateChanged(ProductionState.CREATED, ProductionState.DECLINED, decliner);\n    productionData.state = ProductionState.DECLINED;\n  }\n\n  function finish(\n    address caller,\n    bool isTrustedForwarder,\n    address platformTreasury\n  ) external override hasState(ProductionState.OPEN) onlyOwner whenNotPaused {\n    // if we have an end timestamp we can allow closing anyone (e.g. our relay with an autotask)\n    // otherwise if no timestamp we hand this over to the production owner.\n    require(\n      (productionData.crowdsaleEndDate == 0 && isCreatorOrDelegate(caller)) ||\n        (productionData.crowdsaleEndDate > 0 &&\n          productionData.crowdsaleEndDate <= block.timestamp &&\n          (isCreatorOrDelegate(caller) || isTrustedForwarder)),\n      \"Cannot be finished before finish date or only by creator\"\n    );\n    emit StateChanged(ProductionState.OPEN, ProductionState.FINISHED, caller);\n    productionData.state = ProductionState.FINISHED;\n    swipeToCreator(caller, platformTreasury);\n  }\n\n  function close(\n    address caller,\n    bool isTrustedForwarder,\n    address platformTreasury\n  ) external override hasState(ProductionState.FINISHED) onlyOwner {\n    // if we have an end timestamp we can allow closing anyone (e.g. our relay with an autotask)\n    // otherwise if no timestamp we hand this over to the production owner.\n    require(\n      (productionData.productionEndDate == 0 && isCreatorOrDelegate(caller)) ||\n        (productionData.productionEndDate > 0 &&\n          productionData.productionEndDate <= block.timestamp &&\n          (isCreatorOrDelegate(caller) || isTrustedForwarder)),\n      \"Cannot be closed before close date or only by creator\"\n    );\n    emit StateChanged(ProductionState.FINISHED, ProductionState.CLOSED, caller);\n    productionData.state = ProductionState.CLOSED;\n    swipeToCreator(caller, platformTreasury);\n  }\n\n  function pause(address caller) external onlyOwner hasState(ProductionState.OPEN) whenNotPaused {\n    require(members.isApprover(caller), \"Caller must be approver\");\n    _pause();\n  }\n\n  function unpause(address caller) external onlyOwner hasState(ProductionState.OPEN) whenPaused {\n    require(members.isApprover(caller), \"Caller must be approver\");\n    _unpause();\n  }\n\n  function paused() public view override(Pausable, IProductionEscrowV3) onlyOwner returns (bool) {\n    return Pausable.paused();\n  }\n\n  function cancel(address caller, uint256 newCloseDate) external onlyOwner hasState(ProductionState.OPEN) whenPaused {\n    require(members.isApprover(caller), \"Caller must be approver\");\n    require(newCloseDate >= block.timestamp + 30 days, \"Refund period not long enough\");\n    emit StateChanged(ProductionState.OPEN, ProductionState.FINISHED, caller);\n    productionData.state = ProductionState.FINISHED;\n    productionData.productionEndDate = newCloseDate;\n    refundable = true;\n    IERC20Upgradeable currency = IERC20Upgradeable(productionData.currency);\n    uint256 balance = currency.balanceOf(address(this));\n    proceedsEarned += balance;\n    _unpause();\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // Tokens, funds and proceeds\n  // ---------------------------------------------------------------------------------------------\n\n  function buyTokens(\n    address buyer,\n    uint256 amount,\n    uint256 price,\n    uint16 perkId\n  ) external override hasState(ProductionState.OPEN) whenNotPaused onlyOwner {\n    require(amount <= productionData.totalSupply - productionData.soldCounter, \"Not enough tokens available\");\n    require(\n      members.isInvestor(buyer) ||\n        amount <= productionData.maxTokensUnknownBuyer ||\n        productionData.maxTokensUnknownBuyer == 0,\n      \"Needs investor role to buy amount of tokens\"\n    );\n    claimPerk(buyer, amount, perkId);\n    fundsRaised += price;\n    emit TokenBought(buyer, amount, price, perkId);\n    productionData.soldCounter += amount;\n    tokenContract.safeTransferFrom(address(this), buyer, productionData.id, amount, \"\");\n    purchasesByBuyer[buyer].push(Purchase(amount, price));\n  }\n\n  function depositProceeds(address caller, uint256 amount)\n    external\n    override\n    hasState(ProductionState.FINISHED)\n    creatorOnly(caller)\n    onlyOwner\n  {\n    emit ProceedsDeposited(amount, caller);\n    proceedsEarned += amount;\n  }\n\n  function transferProceeds(address holder)\n    external\n    override\n    hasState(ProductionState.FINISHED)\n    onlyOwner\n    returns (uint256 payout)\n  {\n    require(members.isInvestor(holder), \"Only investors can claim proceeds\");\n    uint256 tokens = tokenContract.balanceOf(holder, productionData.id);\n    payout = ((tokens * proceedsEarned) / productionData.soldCounter) - payoutPerTokenTracking[holder];\n    payoutPerTokenHolder[holder] += payout;\n    payoutPerTokenTracking[holder] += payout;\n    if (payout > 0) {\n      emit ProceedsClaimed(payout, holder);\n      IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\n      token.safeTransfer(holder, payout);\n    }\n  }\n\n  function transferFunding(address caller, address platformTreasury)\n    external\n    override\n    hasState(ProductionState.OPEN)\n    creatorOnly(caller)\n    onlyOwner\n    whenNotPaused\n    returns (uint256 amount, uint256 platformShare)\n  {\n    (amount, platformShare) = swipeToCreator(caller, platformTreasury);\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // Callbacks\n  // ---------------------------------------------------------------------------------------------\n\n  function onTokenTransfer(\n    IERC1155Upgradeable, /* tokenContract */\n    uint256 tokenId,\n    address currentOwner,\n    address newOwner,\n    uint256 numTokens\n  ) external override {\n    require(msg.sender == address(tokenContract), \"Unknown token contract sender\");\n    require(tokenId == productionData.id, \"Invalid token id\");\n    require(numTokens > 0, \"Tokens to transfer must be > 0\");\n    uint256 currentBalance = tokenContract.balanceOf(currentOwner, productionData.id);\n    require(currentBalance >= numTokens, \"Insufficient balance for transfer\");\n    uint256 payoutTransfer = (numTokens * payoutPerTokenTracking[currentOwner]) / currentBalance;\n    payoutPerTokenTracking[currentOwner] -= payoutTransfer;\n    payoutPerTokenTracking[newOwner] += payoutTransfer;\n  }\n\n  function onERC1155Received(\n    address, /*operator*/\n    address, /*from*/\n    uint256 tokenId,\n    uint256 amount,\n    bytes calldata /*data*/\n  ) external virtual override hasState(ProductionState.CREATED) returns (bytes4) {\n    require(productionData.id == 0, \"Token already set\");\n    require(productionData.totalSupply == amount, \"Wrong amount minted\");\n    productionData.id = tokenId;\n    tokenContract = IERC1155Upgradeable(msg.sender);\n    if (productionData.organizerTokens > 0) {\n      tokenContract.safeTransferFrom(\n        address(this),\n        productionData.creator,\n        tokenId,\n        productionData.organizerTokens,\n        bytes(\"\")\n      );\n      productionData.soldCounter += productionData.organizerTokens;\n    }\n    return this.onERC1155Received.selector;\n  }\n\n  function onERC1155BatchReceived(\n    address, /*operator*/\n    address, /*from*/\n    uint256[] calldata, /*tokenIds*/\n    uint256[] calldata, /*values*/\n    bytes calldata /*data*/\n  ) external virtual override returns (bytes4) {\n    return 0x00; // unsupported\n  }\n\n  // ERC165 - needed from ERC1155Receiver\n  function supportsInterface(bytes4 interfaceID) external view virtual override returns (bool) {\n    return\n      interfaceID == 0x01ffc9a7 || // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\n      interfaceID == 0x4e2312e0; // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // private\n  // ---------------------------------------------------------------------------------------------\n\n  function swipeToCreator(address caller, address platformTreasury)\n    private\n    returns (uint256 balanceLeft, uint256 platformShare)\n  {\n    IERC20Upgradeable currency = IERC20Upgradeable(productionData.currency);\n    uint256 balance = currency.balanceOf(address(this));\n    platformShare = (balance * productionData.platformSharePercentage) / 100;\n    balanceLeft = balance - platformShare;\n    emit FundingClaimed(balanceLeft, platformShare, caller);\n    currency.safeTransfer(productionData.creator, balanceLeft);\n    currency.safeTransfer(platformTreasury, platformShare);\n  }\n\n  function isCreatorOrDelegate(address caller) private view returns (bool) {\n    return productionData.creator == caller || members.isOrganizerDelegate(caller, productionData.creator);\n  }\n\n  function claimPerk(\n    address buyer,\n    uint256 tokensBought,\n    uint16 perkId\n  ) internal {\n    if (perkId == 0) {\n      return;\n    }\n    require(perkId <= perks.length, \"Invalid perkId\");\n    Perk storage perk = perks[perkId - 1];\n    require(perk.total > perk.claimed, \"Perk not available\");\n    require(perk.minTokensRequired <= tokensBought, \"Not enough tokens to claim\");\n    perk.claimed += 1;\n    perksByOwner[buyer].push(perkId);\n    EnumerableSet.add(perkSetByOwner[buyer], perkId);\n    if (address(productionData.perkTracker) != address(0)) {\n      productionData.perkTracker.perkClaimed(buyer, productionData.id, perkId, tokensBought);\n    }\n  }\n\n  function countIds(uint16 perkId, uint16[] memory perkIds) private pure returns (uint16 result) {\n    for (uint16 i = 0; i < perkIds.length; i++) {\n      if (perkIds[i] == perkId) {\n        result += 1;\n      }\n    }\n  }\n}\n"
    },
    "contracts/v3/StaxeProductionsFactoryV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\nimport \"./interfaces/IMembersV3.sol\";\nimport \"./interfaces/IPerkTrackerV3.sol\";\nimport \"./interfaces/IPriceCalculationEngineV3.sol\";\nimport \"./interfaces/IProductionsV3.sol\";\nimport \"./interfaces/IProductionEscrowV3.sol\";\nimport \"./StaxeProductionEscrowV3.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract StaxeProductionsFactoryV3 {\n  // ----- Structs -----\n  struct CreatePerk {\n    uint16 total;\n    uint256 minTokensRequired;\n  }\n\n  struct CreateProduction {\n    uint256 totalSupply;\n    uint256 organizerTokens;\n    uint256 tokenPrice;\n    address currency;\n    uint256 maxTokensUnknownBuyer;\n    CreatePerk[] perks;\n    string dataHash;\n    uint256 crowdsaleEndDate;\n    uint256 productionEndDate;\n    uint8 platformSharePercentage;\n    address perkTracker;\n  }\n\n  // ----- Events -----\n  event ProductionCreated(uint256 indexed id, address indexed creator, uint256 tokenSupply, address escrow);\n\n  // ----- State -----\n  IProductionsV3 private productions;\n  IMembersV3 private members;\n  IPriceCalculationEngineV3 private priceCalculationEngine;\n\n  constructor(\n    IProductionsV3 _productions,\n    IMembersV3 _members,\n    IPriceCalculationEngineV3 _priceCalculationEngine\n  ) {\n    productions = _productions;\n    members = _members;\n    priceCalculationEngine = _priceCalculationEngine;\n  }\n\n  // ----- Functions -----\n  function createProduction(CreateProduction calldata data) external {\n    require(members.isOrganizer(msg.sender), \"Not an organizer\");\n    IProductionEscrowV3.Perk[] memory perks = new IProductionEscrowV3.Perk[](data.perks.length);\n    for (uint16 i = 0; i < perks.length; i++) {\n      CreatePerk memory perk = data.perks[i];\n      perks[i] = IProductionEscrowV3.Perk({\n        id: i + 1,\n        total: perk.total,\n        claimed: 0,\n        minTokensRequired: perk.minTokensRequired\n      });\n    }\n    IProductionEscrowV3.ProductionData memory productionData = IProductionEscrowV3.ProductionData({\n      id: 0,\n      creator: msg.sender,\n      totalSupply: data.totalSupply,\n      organizerTokens: data.organizerTokens,\n      maxTokensUnknownBuyer: data.maxTokensUnknownBuyer,\n      soldCounter: 0,\n      currency: IERC20Upgradeable(data.currency),\n      state: IProductionEscrowV3.ProductionState.CREATED,\n      dataHash: data.dataHash,\n      crowdsaleEndDate: data.crowdsaleEndDate,\n      productionEndDate: data.productionEndDate,\n      platformSharePercentage: data.platformSharePercentage,\n      perkTracker: IPerkTrackerV3(data.perkTracker),\n      priceCalculationEngine: IPriceCalculationEngineV3(priceCalculationEngine)\n    });\n    StaxeProductionEscrowV3 escrow = new StaxeProductionEscrowV3(productionData, perks, data.tokenPrice, members);\n    escrow.transferOwnership(address(productions));\n    if (data.perkTracker != address(0)) {\n      productionData.perkTracker.registerEscrow(escrow);\n    }\n    uint256 id = productions.mintProduction(escrow, msg.sender, data.totalSupply);\n    emit ProductionCreated(id, msg.sender, data.totalSupply, address(escrow));\n  }\n}\n"
    },
    "contracts/v3/StaxeProductionsV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport \"./interfaces/IProductionEscrowV3.sol\";\nimport \"./interfaces/IProductionTokenV3.sol\";\nimport \"./interfaces/IProductionTokenTrackerV3.sol\";\nimport \"./interfaces/IProductionsV3.sol\";\nimport \"./interfaces/IMembersV3.sol\";\nimport \"./interfaces/IWETH.sol\";\n\n//import \"hardhat/console.sol\";\n\n/// @custom:security-contact info@staxe.io\ncontract StaxeProductionsV3 is\n  ERC2771ContextUpgradeable,\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  IProductionsV3\n{\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n  using AddressUpgradeable for address payable;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  // ---------- State ----------\n\n  CountersUpgradeable.Counter private tokenIds;\n  mapping(address => bool) public trustedEscrowFactories;\n  mapping(address => bool) public trustedErc20Coins;\n\n  ISwapRouter public constant router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n\n  mapping(uint256 => Escrow) public productionEscrows;\n  mapping(address => uint256[]) public productionIdsByOwner;\n  IProductionTokenV3 public productionToken;\n  IMembersV3 public members;\n  address public treasury;\n  IWETH public nativeWrapper;\n  address private relayer;\n\n  // ---------- Functions ----------\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(address trustedForwarder) ERC2771ContextUpgradeable(trustedForwarder) {\n    _disableInitializers();\n  }\n\n  // ---- Modifiers ----\n\n  modifier validProduction(uint256 id) {\n    require(productionEscrows[id].id != 0, \"Production does not exist\");\n    _;\n  }\n\n  modifier validBuyer(address buyer) {\n    require(buyer != address(0), \"Buyer must be valid address\");\n    // 1. Anyone can buy for own address\n    // 2. Investors can buy for other addresses\n    require(buyer == _msgSender() || members.isInvestor(_msgSender()), \"Invalid token buyer\");\n    _;\n  }\n\n  modifier relayerOnly() {\n    require(msg.sender == relayer, \"Can only be called from trusted relayer\");\n    _;\n  }\n\n  // ---- Proxy ----\n\n  function initialize(\n    IProductionTokenV3 _productionToken,\n    IMembersV3 _members,\n    IWETH _nativeWrapper,\n    address _treasury,\n    address _relayer\n  ) public initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n\n    require(_treasury != address(0), \"Treasury must be valid address\");\n\n    productionToken = _productionToken;\n    members = _members;\n    nativeWrapper = _nativeWrapper;\n    treasury = _treasury;\n    relayer = _relayer;\n    tokenIds.increment();\n  }\n\n  // ---- Data Access ----\n\n  function getProduction(uint256 id) external view override returns (Production memory) {\n    if (productionEscrows[id].id == 0) {\n      return emptyProduction(id);\n    }\n    (\n      IProductionEscrowV3.ProductionData memory data,\n      IProductionEscrowV3.Perk[] memory perks,\n      uint256 fundsRaised,\n      uint256 proceedsEarned\n    ) = productionEscrows[id].escrow.getProductionDataWithPerks();\n    uint256 balance = IERC20Upgradeable(data.currency).balanceOf(address(productionEscrows[id].escrow));\n    bool paused = productionEscrows[id].escrow.paused();\n    return\n      Production({\n        id: id,\n        data: data,\n        perks: perks,\n        escrow: productionEscrows[id].escrow,\n        fundsRaised: fundsRaised,\n        proceedsEarned: proceedsEarned,\n        escrowBalance: balance,\n        paused: paused\n      });\n  }\n\n  function getTokenPrice(uint256 id, uint256 amount)\n    external\n    view\n    override\n    validProduction(id)\n    returns (IERC20Upgradeable, uint256)\n  {\n    return productionEscrows[id].escrow.getTokenPrice(amount, _msgSender());\n  }\n\n  function getTokenPriceFor(\n    uint256 id,\n    uint256 amount,\n    address buyer\n  ) external view override validProduction(id) validBuyer(buyer) returns (IERC20Upgradeable, uint256) {\n    return productionEscrows[id].escrow.getTokenPrice(amount, buyer);\n  }\n\n  function getTokenOwnerData(uint256 id, address tokenOwner)\n    external\n    view\n    override\n    validProduction(id)\n    validBuyer(tokenOwner)\n    returns (\n      uint256 balance,\n      IProductionEscrowV3.Purchase[] memory purchases,\n      IProductionEscrowV3.Perk[] memory perksOwned,\n      uint256 proceedsClaimed,\n      uint256 proceedsAvailable\n    )\n  {\n    return productionEscrows[id].escrow.getTokenOwnerData(tokenOwner);\n  }\n\n  function getProductionIdsByCreator(address creator) external view override returns (uint256[] memory) {\n    return productionIdsByOwner[creator];\n  }\n\n  // ---- Lifecycle ----\n\n  function mintProduction(\n    IProductionEscrowV3 escrow,\n    address creator,\n    uint256 totalAmount\n  ) external override nonReentrant returns (uint256 id) {\n    require(trustedEscrowFactories[_msgSender()], \"Untrusted Escrow Factory\");\n    require(trustedErc20Coins[address(escrow.getProductionData().currency)], \"Unknown ERC20 token\");\n    id = tokenIds.current();\n    emit ProductionMinted(id, creator, totalAmount, address(escrow));\n    productionEscrows[id] = Escrow({id: id, escrow: escrow});\n    tokenIds.increment();\n    productionToken.mintToken(IProductionTokenTrackerV3(escrow), id, totalAmount);\n    productionIdsByOwner[creator].push(id);\n  }\n\n  function approve(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.approve(_msgSender());\n  }\n\n  function decline(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.decline(_msgSender());\n  }\n\n  function finishCrowdsale(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.finish(_msgSender(), msg.sender == relayer, treasury);\n  }\n\n  function close(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.close(_msgSender(), msg.sender == relayer, treasury);\n  }\n\n  function pause(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.pause(_msgSender());\n  }\n\n  function unpause(uint256 id) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.unpause(_msgSender());\n  }\n\n  function cancel(uint256 id, uint256 newCloseDate) external override nonReentrant validProduction(id) {\n    productionEscrows[id].escrow.cancel(_msgSender(), newCloseDate);\n  }\n\n  // ---- Buy Tokens ----\n\n  function buyTokensWithCurrency(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external payable override nonReentrant validProduction(id) validBuyer(buyer) {\n    require(amount > 0, \"Must pass amount > 0\");\n    require(msg.value > 0, \"Must pass msg.value > 0\");\n    IProductionEscrowV3 escrow = productionEscrows[id].escrow;\n    require(amount <= escrow.getTokensAvailable(), \"Cannot buy more than available\");\n    (IERC20Upgradeable token, uint256 price) = escrow.getTokenPrice(amount, buyer);\n    swapToTargetTokenAmountOut(token, price, address(escrow));\n    emit TokenBought(id, buyer, amount, price, perk);\n    escrow.buyTokens(buyer, amount, price, perk);\n  }\n\n  function buyTokensWithTokens(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external override nonReentrant validProduction(id) validBuyer(buyer) {\n    buyWithTransfer(id, amount, _msgSender(), buyer, perk);\n  }\n\n  function buyTokensWithFiat(\n    uint256 id,\n    address buyer,\n    uint256 amount,\n    uint16 perk\n  ) external override nonReentrant validProduction(id) relayerOnly {\n    buyWithTransfer(id, amount, msg.sender, buyer, perk);\n  }\n\n  // ---- Proceeds and funds ----\n\n  function depositProceedsInTokens(uint256 id, uint256 amount) external override nonReentrant validProduction(id) {\n    IProductionEscrowV3.ProductionData memory productionData = productionEscrows[id].escrow.getProductionData();\n    IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\n    require(token.allowance(productionData.creator, address(this)) >= amount, \"Insufficient allowance\");\n    token.safeTransferFrom(productionData.creator, address(this), amount);\n    token.safeTransfer(address(productionEscrows[id].escrow), amount);\n    productionEscrows[id].escrow.depositProceeds(_msgSender(), amount);\n    emit ProceedsDeposited(id, _msgSender(), amount);\n  }\n\n  function depositProceedsInCurrency(uint256 id) external payable override nonReentrant validProduction(id) {\n    IProductionEscrowV3.ProductionData memory productionData = productionEscrows[id].escrow.getProductionData();\n    IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\n    uint256 amount = swapToTargetTokenAmountIn(token, address(productionEscrows[id].escrow));\n    emit ProceedsDeposited(id, _msgSender(), amount);\n    productionEscrows[id].escrow.depositProceeds(_msgSender(), amount);\n  }\n\n  function transferProceeds(uint256 id) external override nonReentrant validProduction(id) {\n    uint256 amount = productionEscrows[id].escrow.transferProceeds(_msgSender());\n    emit ProceedsClaimed(id, _msgSender(), amount);\n  }\n\n  function transferFunding(uint256 id) external override nonReentrant validProduction(id) {\n    (uint256 amount, uint256 platformShare) = productionEscrows[id].escrow.transferFunding(_msgSender(), treasury);\n    emit FundingClaimed(id, _msgSender(), amount, platformShare);\n  }\n\n  // ---- Utilities ----\n\n  receive() external payable {}\n\n  function addTrustedEscrowFactory(address trustedEscrowFactory) external onlyOwner {\n    trustedEscrowFactories[trustedEscrowFactory] = true;\n  }\n\n  function removeTrustedEscrowFactory(address invalidAddress) external onlyOwner {\n    trustedEscrowFactories[invalidAddress] = false;\n  }\n\n  function isTrustedErc20Token(address candidate) external view override returns (bool) {\n    return trustedErc20Coins[candidate];\n  }\n\n  function addTrustedErc20Coin(address trustedErc20Coin) external onlyOwner {\n    trustedErc20Coins[trustedErc20Coin] = true;\n  }\n\n  function removeTrustedErc20Coin(address invalidAddress) external onlyOwner {\n    trustedErc20Coins[invalidAddress] = false;\n  }\n\n  function setRelayer(address _relayer) external onlyOwner {\n    relayer = _relayer;\n  }\n\n  // ---- Internal ----\n\n  function _msgSender() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (address sender) {\n    return ERC2771ContextUpgradeable._msgSender();\n  }\n\n  function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\n    return ERC2771ContextUpgradeable._msgData();\n  }\n\n  // ---- Private ----\n\n  function swapToTargetTokenAmountOut(\n    IERC20Upgradeable targetToken,\n    uint256 targetAmount,\n    address targetAddress\n  ) private returns (uint256 amountIn) {\n    ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\n      tokenIn: address(nativeWrapper),\n      tokenOut: address(targetToken),\n      fee: 3000,\n      recipient: targetAddress,\n      deadline: block.timestamp,\n      amountOut: targetAmount,\n      amountInMaximum: msg.value,\n      sqrtPriceLimitX96: 0\n    });\n    nativeWrapper.deposit{value: msg.value}();\n    TransferHelper.safeApprove(address(nativeWrapper), address(router), msg.value);\n    amountIn = router.exactOutputSingle(params);\n    if (amountIn < msg.value) {\n      // Refund ETH to user\n      uint256 refundAmount = msg.value - amountIn;\n      TransferHelper.safeApprove(address(nativeWrapper), address(router), 0);\n      nativeWrapper.withdraw(refundAmount);\n      TransferHelper.safeTransferETH(_msgSender(), refundAmount);\n    }\n  }\n\n  function swapToTargetTokenAmountIn(IERC20Upgradeable targetToken, address targetAddress)\n    private\n    returns (uint256 amountIn)\n  {\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n      tokenIn: address(nativeWrapper),\n      tokenOut: address(targetToken),\n      fee: 3000,\n      recipient: targetAddress,\n      deadline: block.timestamp,\n      amountIn: msg.value,\n      amountOutMinimum: 0,\n      sqrtPriceLimitX96: 0\n    });\n    nativeWrapper.deposit{value: msg.value}();\n    TransferHelper.safeApprove(address(nativeWrapper), address(router), msg.value);\n    amountIn = router.exactInputSingle(params);\n  }\n\n  function buyWithTransfer(\n    uint256 id,\n    uint256 amount,\n    address tokenHolder,\n    address buyer,\n    uint16 perk\n  ) private {\n    require(amount > 0, \"Must pass amount > 0\");\n    IProductionEscrowV3 escrow = productionEscrows[id].escrow;\n    require(amount <= escrow.getTokensAvailable(), \"Cannot buy more than available\");\n    (IERC20Upgradeable token, uint256 price) = escrow.getTokenPrice(amount, buyer);\n    require(token.allowance(tokenHolder, address(this)) >= price, \"Insufficient allowance\");\n    emit TokenBought(id, buyer, amount, price, perk);\n    token.safeTransferFrom(tokenHolder, address(this), price);\n    token.safeTransfer(address(escrow), price);\n    escrow.buyTokens(buyer, amount, price, perk);\n  }\n\n  function emptyProduction(uint256 id) private pure returns (Production memory) {\n    return\n      Production({\n        id: id,\n        data: IProductionEscrowV3.ProductionData({\n          id: id,\n          creator: address(0),\n          totalSupply: 0,\n          organizerTokens: 0,\n          soldCounter: 0,\n          maxTokensUnknownBuyer: 0,\n          currency: IERC20Upgradeable(address(0)),\n          state: IProductionEscrowV3.ProductionState.EMPTY,\n          dataHash: \"\",\n          crowdsaleEndDate: 0,\n          productionEndDate: 0,\n          platformSharePercentage: 0,\n          perkTracker: IPerkTrackerV3(address(0)),\n          priceCalculationEngine: IPriceCalculationEngineV3(address(0))\n        }),\n        perks: new IProductionEscrowV3.Perk[](0),\n        escrow: IProductionEscrowV3(address(0)),\n        fundsRaised: 0,\n        proceedsEarned: 0,\n        escrowBalance: 0,\n        paused: false\n      });\n  }\n}\n"
    },
    "contracts/v3/StaxePurchaseProxyV3.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./interfaces/IProductionsV3.sol\";\nimport \"./interfaces/IProductionEscrowV3.sol\";\nimport \"./interfaces/IPurchaseProxyV3.sol\";\n\n// import \"hardhat/console.sol\";\n\n/// @custom:security-contact info@staxe.io\ncontract StaxePurchaseProxyV3 is\n  IPurchaseProxyV3,\n  ERC20Upgradeable,\n  ERC2771ContextUpgradeable,\n  OwnableUpgradeable,\n  PausableUpgradeable,\n  ReentrancyGuardUpgradeable\n{\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  IProductionsV3 private productions;\n  IERC20Upgradeable private wrappedToken;\n  mapping(address => Purchase) private purchases;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor(address _trustedForwarder) ERC2771ContextUpgradeable(_trustedForwarder) {\n    _disableInitializers();\n  }\n\n  function initialize(IProductionsV3 _productions, IERC20Upgradeable _wrappedToken) public initializer {\n    __Ownable_init();\n    __ERC20_init(\"Staxe Wrapper Tokens\", \"WSTX\");\n    __Pausable_init();\n    __ReentrancyGuard_init();\n    productions = _productions;\n    wrappedToken = _wrappedToken;\n  }\n\n  // ---- Functions ----\n\n  function decimals() public view override returns (uint8) {\n    return IERC20MetadataUpgradeable(address(wrappedToken)).decimals();\n  }\n\n  function placePurchase(\n    uint256 tokenId,\n    uint256 numTokens,\n    uint16 perkId\n  ) external override nonReentrant whenNotPaused {\n    require(\n      productions.getProduction(tokenId).data.state == IProductionEscrowV3.ProductionState.OPEN,\n      \"Proudction not open for token sales\"\n    );\n    require(numTokens != 0, \"Invalid token number to buy\");\n    emit PurchasePlaced(_msgSender(), tokenId, numTokens, perkId);\n    purchases[_msgSender()] = Purchase({tokenId: tokenId, numTokens: numTokens, perkId: perkId});\n  }\n\n  function purchase(\n    uint256 tokenId,\n    uint256 numTokens,\n    uint16 perkId\n  ) external override nonReentrant whenNotPaused {\n    require(\n      productions.getProduction(tokenId).data.state == IProductionEscrowV3.ProductionState.OPEN,\n      \"Proudction not open for token sales\"\n    );\n    require(numTokens != 0, \"Invalid token number to buy\");\n    _purchase(_msgSender(), tokenId, numTokens, perkId, true);\n  }\n\n  function depositTo(\n    address buyer,\n    uint256 tokenAmount,\n    address tokenAddress\n  ) external override nonReentrant whenNotPaused {\n    require(tokenAddress == address(wrappedToken), \"Invalid token sent\");\n    IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\n    token.safeTransferFrom(_msgSender(), address(this), tokenAmount);\n    _mint(buyer, tokenAmount);\n    if (purchases[buyer].tokenId != 0) {\n      bool result = _purchase(\n        buyer,\n        purchases[buyer].tokenId,\n        purchases[buyer].numTokens,\n        purchases[buyer].perkId,\n        false\n      );\n      if (result) {\n        purchases[buyer].tokenId = 0;\n      }\n    }\n  }\n\n  function withdraw(uint256 amount) external override nonReentrant whenNotPaused {\n    require(amount > 0, \"Amount must be > 0\");\n    require(balanceOf(_msgSender()) >= amount, \"Balance not high enough\");\n    _burn(_msgSender(), amount);\n    wrappedToken.safeTransfer(_msgSender(), amount);\n  }\n\n  function withdrawAll() external override nonReentrant whenNotPaused {\n    uint256 balance = balanceOf(_msgSender());\n    require(balance > 0, \"Nothing to withdraw\");\n    _burn(_msgSender(), balance);\n    wrappedToken.safeTransfer(_msgSender(), balance);\n  }\n\n  // ---- Admin ----\n\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  // ---- Internal ----\n\n  function _purchase(\n    address buyer,\n    uint256 tokenId,\n    uint256 numTokens,\n    uint16 perkId,\n    bool requireSufficientBalance\n  ) internal returns (bool) {\n    (IERC20Upgradeable productionCurrency, uint256 price) = productions.getTokenPriceFor(tokenId, numTokens, buyer);\n    require(address(productionCurrency) == address(wrappedToken), \"Invalid payment currency\");\n    require(!requireSufficientBalance || balanceOf(buyer) >= price, \"Balance too low\");\n    if (balanceOf(buyer) >= price) {\n      emit PurchaseExecuted(buyer, tokenId, numTokens, perkId, address(productionCurrency), price);\n      _burn(buyer, price);\n      wrappedToken.safeApprove(address(productions), price);\n      productions.buyTokensWithTokens(tokenId, buyer, numTokens, perkId);\n      return true;\n    }\n    return false;\n  }\n\n  function _msgSender() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (address sender) {\n    return ERC2771ContextUpgradeable._msgSender();\n  }\n\n  function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\n    return ERC2771ContextUpgradeable._msgData();\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}