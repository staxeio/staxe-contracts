{
  "address": "0x4b35E464De664e3c7621972980c0A37d2E2A7321",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProductionEscrowV3",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organizerTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "soldCounter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTokensUnknownBuyer",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20Upgradeable",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum IProductionEscrowV3.ProductionState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "dataHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "crowdsaleEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "platformSharePercentage",
              "type": "uint8"
            },
            {
              "internalType": "contract IPerkTrackerV3",
              "name": "perkTracker",
              "type": "address"
            },
            {
              "internalType": "contract IPriceCalculationEngineV3",
              "name": "priceCalculationEngine",
              "type": "address"
            }
          ],
          "internalType": "struct IProductionEscrowV3.ProductionData",
          "name": "productionData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenBasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "calculateTokenPrice",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf241fbdad992db4d59a9983111ca17296c92a1c129faaf6c93deac49a44dd3a6",
  "receipt": {
    "to": null,
    "from": "0x286e6941813256080D8ca5fb679964203E9A3086",
    "contractAddress": "0x4b35E464De664e3c7621972980c0A37d2E2A7321",
    "transactionIndex": 37,
    "gasUsed": "151681",
    "logsBloom": "0x
    "blockHash": "0x5966a8935f627714b1ab10716479b29e3597adc9d95ff5e938379872cf0eedf8",
    "transactionHash": "0xf241fbdad992db4d59a9983111ca17296c92a1c129faaf6c93deac49a44dd3a6",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 37133309,
        "transactionHash": "0xf241fbdad992db4d59a9983111ca17296c92a1c129faaf6c93deac49a44dd3a6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000286e6941813256080d8ca5fb679964203e9a3086",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000fc9133159d80600000000000000000000000000000000000000000000000037fae0ea490c573200000000000000000000000000000000000000000001be78335e3b1ac044674d00000000000000000000000000000000000000000000000037eb17d717b27f2c00000000000000000000000000000000000000000001be78336e042df19e3f53",
        "logIndex": 191,
        "blockHash": "0x5966a8935f627714b1ab10716479b29e3597adc9d95ff5e938379872cf0eedf8"
      }
    ],
    "blockNumber": 37133309,
    "cumulativeGasUsed": "14289343",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b801a4be96309b7026ac8774cd2b71b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProductionEscrowV3\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organizerTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensUnknownBuyer\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IProductionEscrowV3.ProductionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"crowdsaleEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"platformSharePercentage\",\"type\":\"uint8\"},{\"internalType\":\"contract IPerkTrackerV3\",\"name\":\"perkTracker\",\"type\":\"address\"},{\"internalType\":\"contract IPriceCalculationEngineV3\",\"name\":\"priceCalculationEngine\",\"type\":\"address\"}],\"internalType\":\"struct IProductionEscrowV3.ProductionData\",\"name\":\"productionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenBasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"calculateTokenPrice\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/StaticPriceCalculationEngine.sol\":\"StaticPriceCalculationEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/v3/StaticPriceCalculationEngine.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IProductionEscrowV3.sol\\\";\\nimport \\\"./interfaces/IPriceCalculationEngineV3.sol\\\";\\n\\ncontract StaticPriceCalculationEngine is IPriceCalculationEngineV3 {\\n  function calculateTokenPrice(\\n    IProductionEscrowV3,\\n    IProductionEscrowV3.ProductionData calldata productionData,\\n    uint256 tokenBasePrice,\\n    uint256 amount,\\n    address\\n  ) external pure returns (IERC20Upgradeable currency, uint256 price) {\\n    return (productionData.currency, amount * tokenBasePrice);\\n  }\\n}\\n\",\"keccak256\":\"0xe94c0270054cb53a4b05926e016a340f908bf29d7c6315aa95697c489a439582\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPerkTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPerkTrackerV3 {\\n  function perkClaimed(\\n    address claimer,\\n    uint256 productionId,\\n    uint16 perkId,\\n    uint256 tokensBought\\n  ) external;\\n\\n  function registerEscrow(IProductionEscrowV3 escrow) external;\\n}\\n\",\"keccak256\":\"0x24cceb2ba26d52649efe8a6043402dbc9c452c5d63ba2e34df2bd1d8280d76ef\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPriceCalculationEngineV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPriceCalculationEngineV3 {\\n  function calculateTokenPrice(\\n    IProductionEscrowV3 escrow,\\n    IProductionEscrowV3.ProductionData calldata production,\\n    uint256 tokenBasePrice,\\n    uint256 amount,\\n    address buyer\\n  ) external view returns (IERC20Upgradeable currency, uint256 price);\\n}\\n\",\"keccak256\":\"0xc82f1e05afad1b7d746f4ffdb64d985136cfca847de0a8aa18e10e0a4f240713\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionEscrowV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IProductionTokenTrackerV3.sol\\\";\\nimport \\\"./IPriceCalculationEngineV3.sol\\\";\\nimport \\\"./IPerkTrackerV3.sol\\\";\\n\\ninterface IProductionEscrowV3 is IProductionTokenTrackerV3 {\\n  enum ProductionState {\\n    EMPTY,\\n    CREATED,\\n    OPEN,\\n    FINISHED,\\n    DECLINED,\\n    CANCELED,\\n    CLOSED\\n  }\\n\\n  struct Perk {\\n    uint16 id;\\n    uint16 total;\\n    uint16 claimed;\\n    uint256 minTokensRequired;\\n  }\\n\\n  struct Purchase {\\n    uint256 tokens;\\n    uint256 price;\\n  }\\n\\n  struct ProductionData {\\n    uint256 id;\\n    address creator;\\n    uint256 totalSupply;\\n    uint256 organizerTokens;\\n    uint256 soldCounter;\\n    uint256 maxTokensUnknownBuyer;\\n    IERC20Upgradeable currency;\\n    ProductionState state;\\n    string dataHash;\\n    uint256 crowdsaleEndDate;\\n    uint256 productionEndDate;\\n    uint8 platformSharePercentage;\\n    IPerkTrackerV3 perkTracker;\\n    IPriceCalculationEngineV3 priceCalculationEngine;\\n  }\\n\\n  // --- Events ---\\n\\n  event StateChanged(ProductionState from, ProductionState to, address by);\\n  event TokenBought(address buyer, uint256 amount, uint256 price, uint16 perkClaimed);\\n  event FundingClaimed(uint256 amount, uint256 platformShare, address by);\\n  event ProceedsDeposited(uint256 amount, address by);\\n  event ProceedsClaimed(uint256 amount, address by);\\n\\n  // --- Functions ---\\n\\n  function getProductionData() external view returns (ProductionData memory);\\n\\n  function getProductionDataWithPerks()\\n    external\\n    view\\n    returns (\\n      ProductionData memory,\\n      Perk[] memory,\\n      uint256 fundsRaised,\\n      uint256 proceedsEarned\\n    );\\n\\n  function getTokenOwnerData(address tokenOwner)\\n    external\\n    view\\n    returns (\\n      uint256 balance,\\n      Purchase[] memory purchases,\\n      Perk[] memory perks,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    );\\n\\n  function getTokensAvailable() external view returns (uint256);\\n\\n  function getTokenPrice(uint256 amount, address buyer) external view returns (IERC20Upgradeable, uint256);\\n\\n  function approve(address approver) external;\\n\\n  function decline(address decliner) external;\\n\\n  function finish(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function close(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function pause(address caller) external;\\n\\n  function unpause(address caller) external;\\n\\n  function paused() external view returns (bool);\\n\\n  function cancel(address caller, uint256 newCloseDate) external;\\n\\n  function buyTokens(\\n    address buyer,\\n    uint256 amount,\\n    uint256 price,\\n    uint16 perk\\n  ) external;\\n\\n  function depositProceeds(address caller, uint256 amount) external;\\n\\n  function transferProceeds(address tokenHolder) external returns (uint256 amount);\\n\\n  function transferFunding(address caller, address platformTreasury)\\n    external\\n    returns (uint256 amount, uint256 platformShare);\\n}\\n\",\"keccak256\":\"0x712aefc530bad87ccdf739c3a81757d97aff04a5ee20db5755c6708d438883b3\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionTokenTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IProductionTokenTrackerV3 {\\n  function onTokenTransfer(\\n    IERC1155Upgradeable tokenContract,\\n    uint256 tokenId,\\n    address currentOwner,\\n    address newOwner,\\n    uint256 numTokens\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdb0557d9b0679807c9b2d0c5fdad772686cad7f0212610b64d1242970286a730\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101c8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635ae55d4c14610030575b600080fd5b61004361003e3660046100c3565b610073565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520160405180910390f35b60008061008660e0870160c08801610141565b6100908686610165565b915091509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b50565b600080600080600060a086880312156100db57600080fd5b85356100e68161009e565b9450602086013567ffffffffffffffff81111561010257600080fd5b86016101c0818903121561011557600080fd5b9350604086013592506060860135915060808601356101338161009e565b809150509295509295909350565b60006020828403121561015357600080fd5b813561015e8161009e565b9392505050565b600081600019048311821515161561018d57634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220e592146ae3b67c5f3afc5e73a4675c96aab341348521be48e26b6dfd9d0474a464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80635ae55d4c14610030575b600080fd5b61004361003e3660046100c3565b610073565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091520160405180910390f35b60008061008660e0870160c08801610141565b6100908686610165565b915091509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b50565b600080600080600060a086880312156100db57600080fd5b85356100e68161009e565b9450602086013567ffffffffffffffff81111561010257600080fd5b86016101c0818903121561011557600080fd5b9350604086013592506060860135915060808601356101338161009e565b809150509295509295909350565b60006020828403121561015357600080fd5b813561015e8161009e565b9392505050565b600081600019048311821515161561018d57634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220e592146ae3b67c5f3afc5e73a4675c96aab341348521be48e26b6dfd9d0474a464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}