{
  "address": "0xF694080e3dAf84B5A4a9A6dDf9c049b5FA952D42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformShare",
          "type": "uint256"
        }
      ],
      "name": "FundingClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProceedsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProceedsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "ProductionMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "perkClaimed",
          "type": "uint16"
        }
      ],
      "name": "TokenBought",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedErc20Coin",
          "type": "address"
        }
      ],
      "name": "addTrustedErc20Coin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedEscrowFactory",
          "type": "address"
        }
      ],
      "name": "addTrustedEscrowFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "perk",
          "type": "uint16"
        }
      ],
      "name": "buyTokensWithCurrency",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "perk",
          "type": "uint16"
        }
      ],
      "name": "buyTokensWithFiat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "perk",
          "type": "uint16"
        }
      ],
      "name": "buyTokensWithTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newCloseDate",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "decline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "depositProceedsInCurrency",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositProceedsInTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "finishCrowdsale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProduction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "organizerTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "soldCounter",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTokensUnknownBuyer",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20Upgradeable",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "enum IProductionEscrowV3.ProductionState",
                  "name": "state",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "dataHash",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "crowdsaleEndDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "productionEndDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "platformSharePercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "contract IPerkTrackerV3",
                  "name": "perkTracker",
                  "type": "address"
                },
                {
                  "internalType": "contract IPriceCalculationEngineV3",
                  "name": "priceCalculationEngine",
                  "type": "address"
                }
              ],
              "internalType": "struct IProductionEscrowV3.ProductionData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "id",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "total",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "claimed",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "minTokensRequired",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IProductionEscrowV3.Perk[]",
              "name": "perks",
              "type": "tuple[]"
            },
            {
              "internalType": "contract IProductionEscrowV3",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fundsRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proceedsEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "escrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            }
          ],
          "internalType": "struct IProductionsV3.Production",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getProductionIdsByCreator",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "getTokenOwnerData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProductionEscrowV3.Purchase[]",
          "name": "purchases",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "id",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "total",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "claimed",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "minTokensRequired",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProductionEscrowV3.Perk[]",
          "name": "perksOwned",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "proceedsClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proceedsAvailable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "getTokenPriceFor",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProductionTokenV3",
          "name": "_productionToken",
          "type": "address"
        },
        {
          "internalType": "contract IMembersV3",
          "name": "_members",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_nativeWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "members",
      "outputs": [
        {
          "internalType": "contract IMembersV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProductionEscrowV3",
          "name": "escrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "mintProduction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrapper",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productionEscrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "contract IProductionEscrowV3",
          "name": "escrow",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productionIdsByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productionToken",
      "outputs": [
        {
          "internalType": "contract IProductionTokenV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invalidAddress",
          "type": "address"
        }
      ],
      "name": "removeTrustedErc20Coin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "invalidAddress",
          "type": "address"
        }
      ],
      "name": "removeTrustedEscrowFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trustedErc20Coins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trustedEscrowFactories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0052a6fb54a811d1e034621f3cc41eae618d3846ed9eadd27fcbe4b55045c870",
  "receipt": {
    "to": null,
    "from": "0xef5c870723Af027274a09610546ffC55D6eB117f",
    "contractAddress": "0xF694080e3dAf84B5A4a9A6dDf9c049b5FA952D42",
    "transactionIndex": 6,
    "gasUsed": "4269186",
    "logsBloom": "0x
    "blockHash": "0x938c8766f12fbe83bbbc7a5af44730ae96411dfe56b643d84fe0a8ef4b2318c6",
    "transactionHash": "0x0052a6fb54a811d1e034621f3cc41eae618d3846ed9eadd27fcbe4b55045c870",
    "logs": [],
    "blockNumber": 7704396,
    "cumulativeGasUsed": "7381884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43415f3c26771ED52eE5160Ce67AC6f6ad547616"
  ],
  "numDeployments": 1,
  "solcInputHash": "16fa5a17a842ab7a1fdba292100cd1d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformShare\",\"type\":\"uint256\"}],\"name\":\"FundingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"ProductionMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"perkClaimed\",\"type\":\"uint16\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedErc20Coin\",\"type\":\"address\"}],\"name\":\"addTrustedErc20Coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedEscrowFactory\",\"type\":\"address\"}],\"name\":\"addTrustedEscrowFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"perk\",\"type\":\"uint16\"}],\"name\":\"buyTokensWithCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"perk\",\"type\":\"uint16\"}],\"name\":\"buyTokensWithFiat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"perk\",\"type\":\"uint16\"}],\"name\":\"buyTokensWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCloseDate\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"decline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"depositProceedsInCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositProceedsInTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"finishCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProduction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organizerTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensUnknownBuyer\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IProductionEscrowV3.ProductionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"dataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"crowdsaleEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"platformSharePercentage\",\"type\":\"uint8\"},{\"internalType\":\"contract IPerkTrackerV3\",\"name\":\"perkTracker\",\"type\":\"address\"},{\"internalType\":\"contract IPriceCalculationEngineV3\",\"name\":\"priceCalculationEngine\",\"type\":\"address\"}],\"internalType\":\"struct IProductionEscrowV3.ProductionData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"claimed\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minTokensRequired\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductionEscrowV3.Perk[]\",\"name\":\"perks\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IProductionEscrowV3\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundsRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct IProductionsV3.Production\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getProductionIdsByCreator\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"getTokenOwnerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductionEscrowV3.Purchase[]\",\"name\":\"purchases\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"claimed\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minTokensRequired\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductionEscrowV3.Perk[]\",\"name\":\"perksOwned\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"proceedsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceedsAvailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getTokenPriceFor\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProductionTokenV3\",\"name\":\"_productionToken\",\"type\":\"address\"},{\"internalType\":\"contract IMembersV3\",\"name\":\"_members\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_nativeWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"members\",\"outputs\":[{\"internalType\":\"contract IMembersV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProductionEscrowV3\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"mintProduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrapper\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productionEscrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IProductionEscrowV3\",\"name\":\"escrow\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productionIdsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productionToken\",\"outputs\":[{\"internalType\":\"contract IProductionTokenV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalidAddress\",\"type\":\"address\"}],\"name\":\"removeTrustedErc20Coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalidAddress\",\"type\":\"address\"}],\"name\":\"removeTrustedEscrowFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedErc20Coins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedEscrowFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"info@staxe.io\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/StaxeProductionsV3.sol\":\"StaxeProductionsV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8eaf053f06560772b9ced2283c0c5675bb11e274c8217b543bcafb1da0cc5700\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/v3/StaxeProductionsV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/IProductionEscrowV3.sol\\\";\\nimport \\\"./interfaces/IProductionTokenV3.sol\\\";\\nimport \\\"./interfaces/IProductionTokenTrackerV3.sol\\\";\\nimport \\\"./interfaces/IProductionsV3.sol\\\";\\nimport \\\"./interfaces/IMembersV3.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @custom:security-contact info@staxe.io\\ncontract StaxeProductionsV3 is\\n  ERC2771ContextUpgradeable,\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  IProductionsV3\\n{\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n  using AddressUpgradeable for address payable;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  // ---------- State ----------\\n\\n  CountersUpgradeable.Counter private tokenIds;\\n  mapping(address => bool) public trustedEscrowFactories;\\n  mapping(address => bool) public trustedErc20Coins;\\n\\n  ISwapRouter public constant router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n  mapping(uint256 => Escrow) public productionEscrows;\\n  mapping(address => uint256[]) public productionIdsByOwner;\\n  IProductionTokenV3 public productionToken;\\n  IMembersV3 public members;\\n  address public treasury;\\n  IWETH public nativeWrapper;\\n  address private relayer;\\n\\n  // ---------- Functions ----------\\n\\n  constructor(address trustedForwarder) ERC2771ContextUpgradeable(trustedForwarder) {}\\n\\n  // ---- Modifiers ----\\n\\n  modifier validProduction(uint256 id) {\\n    require(productionEscrows[id].id != 0, \\\"Production does not exist\\\");\\n    _;\\n  }\\n\\n  modifier validBuyer(address buyer) {\\n    require(buyer != address(0), \\\"Buyer must be valid address\\\");\\n    // 1. Anyone can buy for own address\\n    // 2. Investors can buy for other addresses\\n    require(buyer == _msgSender() || members.isInvestor(_msgSender()), \\\"Invalid token buyer\\\");\\n    _;\\n  }\\n\\n  modifier relayerOnly() {\\n    require(msg.sender == relayer, \\\"Can only be called from trusted relayer\\\");\\n    _;\\n  }\\n\\n  // ---- Proxy ----\\n\\n  function initialize(\\n    IProductionTokenV3 _productionToken,\\n    IMembersV3 _members,\\n    IWETH _nativeWrapper,\\n    address _treasury,\\n    address _relayer\\n  ) public initializer {\\n    require(_treasury != address(0), \\\"Treasury must be valid address\\\");\\n    productionToken = _productionToken;\\n    members = _members;\\n    nativeWrapper = _nativeWrapper;\\n    treasury = _treasury;\\n    relayer = _relayer;\\n    tokenIds.increment();\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n  }\\n\\n  // ---- Data Access ----\\n\\n  function getProduction(uint256 id) external view override returns (Production memory) {\\n    if (productionEscrows[id].id == 0) {\\n      return emptyProduction(id);\\n    }\\n    (\\n      IProductionEscrowV3.ProductionData memory data,\\n      IProductionEscrowV3.Perk[] memory perks,\\n      uint256 fundsRaised,\\n      uint256 proceedsEarned\\n    ) = productionEscrows[id].escrow.getProductionDataWithPerks();\\n    uint256 balance = IERC20Upgradeable(data.currency).balanceOf(address(productionEscrows[id].escrow));\\n    bool paused = productionEscrows[id].escrow.paused();\\n    return\\n      Production({\\n        id: id,\\n        data: data,\\n        perks: perks,\\n        escrow: productionEscrows[id].escrow,\\n        fundsRaised: fundsRaised,\\n        proceedsEarned: proceedsEarned,\\n        escrowBalance: balance,\\n        paused: paused\\n      });\\n  }\\n\\n  function getTokenPrice(uint256 id, uint256 amount)\\n    external\\n    view\\n    override\\n    validProduction(id)\\n    returns (IERC20Upgradeable, uint256)\\n  {\\n    return productionEscrows[id].escrow.getTokenPrice(amount, _msgSender());\\n  }\\n\\n  function getTokenPriceFor(\\n    uint256 id,\\n    uint256 amount,\\n    address buyer\\n  ) external view override validProduction(id) validBuyer(buyer) returns (IERC20Upgradeable, uint256) {\\n    return productionEscrows[id].escrow.getTokenPrice(amount, buyer);\\n  }\\n\\n  function getTokenOwnerData(uint256 id, address tokenOwner)\\n    external\\n    view\\n    override\\n    validProduction(id)\\n    validBuyer(tokenOwner)\\n    returns (\\n      uint256 balance,\\n      IProductionEscrowV3.Purchase[] memory purchases,\\n      IProductionEscrowV3.Perk[] memory perksOwned,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    )\\n  {\\n    return productionEscrows[id].escrow.getTokenOwnerData(tokenOwner);\\n  }\\n\\n  function getProductionIdsByCreator(address creator) external view override returns (uint256[] memory) {\\n    return productionIdsByOwner[creator];\\n  }\\n\\n  // ---- Lifecycle ----\\n\\n  function mintProduction(\\n    IProductionEscrowV3 escrow,\\n    address creator,\\n    uint256 totalAmount\\n  ) external override nonReentrant returns (uint256 id) {\\n    require(trustedEscrowFactories[_msgSender()], \\\"Untrusted Escrow Factory\\\");\\n    require(trustedErc20Coins[address(escrow.getProductionData().currency)], \\\"Unknown ERC20 token\\\");\\n    id = tokenIds.current();\\n    emit ProductionMinted(id, creator, totalAmount, address(escrow));\\n    productionEscrows[id] = Escrow({id: id, escrow: escrow});\\n    tokenIds.increment();\\n    productionToken.mintToken(IProductionTokenTrackerV3(escrow), id, totalAmount);\\n    productionIdsByOwner[creator].push(id);\\n  }\\n\\n  function approve(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.approve(_msgSender());\\n  }\\n\\n  function decline(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.decline(_msgSender());\\n  }\\n\\n  function finishCrowdsale(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.finish(_msgSender(), msg.sender == relayer, treasury);\\n  }\\n\\n  function close(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.close(_msgSender(), msg.sender == relayer, treasury);\\n  }\\n\\n  function pause(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.pause(_msgSender());\\n  }\\n\\n  function unpause(uint256 id) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.unpause(_msgSender());\\n  }\\n\\n  function cancel(uint256 id, uint256 newCloseDate) external override nonReentrant validProduction(id) {\\n    productionEscrows[id].escrow.cancel(_msgSender(), newCloseDate);\\n  }\\n\\n  // ---- Buy Tokens ----\\n\\n  function buyTokensWithCurrency(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external payable override nonReentrant validProduction(id) validBuyer(buyer) {\\n    require(amount > 0, \\\"Must pass amount > 0\\\");\\n    require(msg.value > 0, \\\"Must pass msg.value > 0\\\");\\n    IProductionEscrowV3 escrow = productionEscrows[id].escrow;\\n    require(amount <= escrow.getTokensAvailable(), \\\"Cannot buy more than available\\\");\\n    (IERC20Upgradeable token, uint256 price) = escrow.getTokenPrice(amount, buyer);\\n    swapToTargetTokenAmountOut(token, price, address(escrow));\\n    emit TokenBought(id, buyer, amount, price, perk);\\n    escrow.buyTokens(buyer, amount, price, perk);\\n  }\\n\\n  function buyTokensWithTokens(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external override nonReentrant validProduction(id) validBuyer(buyer) {\\n    buyWithTransfer(id, amount, _msgSender(), buyer, perk);\\n  }\\n\\n  function buyTokensWithFiat(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external override nonReentrant validProduction(id) relayerOnly {\\n    buyWithTransfer(id, amount, msg.sender, buyer, perk);\\n  }\\n\\n  // ---- Proceeds and funds ----\\n\\n  function depositProceedsInTokens(uint256 id, uint256 amount) external override nonReentrant validProduction(id) {\\n    IProductionEscrowV3.ProductionData memory productionData = productionEscrows[id].escrow.getProductionData();\\n    IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\\n    require(token.allowance(productionData.creator, address(this)) >= amount, \\\"Insufficient allowance\\\");\\n    token.safeTransferFrom(productionData.creator, address(this), amount);\\n    token.safeTransfer(address(productionEscrows[id].escrow), amount);\\n    productionEscrows[id].escrow.depositProceeds(_msgSender(), amount);\\n    emit ProceedsDeposited(id, _msgSender(), amount);\\n  }\\n\\n  function depositProceedsInCurrency(uint256 id) external payable override nonReentrant validProduction(id) {\\n    IProductionEscrowV3.ProductionData memory productionData = productionEscrows[id].escrow.getProductionData();\\n    IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\\n    uint256 amount = swapToTargetTokenAmountIn(token, address(productionEscrows[id].escrow));\\n    emit ProceedsDeposited(id, _msgSender(), amount);\\n    productionEscrows[id].escrow.depositProceeds(_msgSender(), amount);\\n  }\\n\\n  function transferProceeds(uint256 id) external override nonReentrant validProduction(id) {\\n    uint256 amount = productionEscrows[id].escrow.transferProceeds(_msgSender());\\n    emit ProceedsClaimed(id, _msgSender(), amount);\\n  }\\n\\n  function transferFunding(uint256 id) external override nonReentrant validProduction(id) {\\n    (uint256 amount, uint256 platformShare) = productionEscrows[id].escrow.transferFunding(_msgSender(), treasury);\\n    emit FundingClaimed(id, _msgSender(), amount, platformShare);\\n  }\\n\\n  // ---- Utilities ----\\n\\n  receive() external payable {}\\n\\n  function addTrustedEscrowFactory(address trustedEscrowFactory) external onlyOwner {\\n    trustedEscrowFactories[trustedEscrowFactory] = true;\\n  }\\n\\n  function removeTrustedEscrowFactory(address invalidAddress) external onlyOwner {\\n    trustedEscrowFactories[invalidAddress] = false;\\n  }\\n\\n  function addTrustedErc20Coin(address trustedErc20Coin) external onlyOwner {\\n    trustedErc20Coins[trustedErc20Coin] = true;\\n  }\\n\\n  function removeTrustedErc20Coin(address invalidAddress) external onlyOwner {\\n    trustedErc20Coins[invalidAddress] = false;\\n  }\\n\\n  function setRelayer(address _relayer) external onlyOwner {\\n    relayer = _relayer;\\n  }\\n\\n  // ---- Internal ----\\n\\n  function _msgSender() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (address sender) {\\n    return ERC2771ContextUpgradeable._msgSender();\\n  }\\n\\n  function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n    return ERC2771ContextUpgradeable._msgData();\\n  }\\n\\n  // ---- Private ----\\n\\n  function swapToTargetTokenAmountOut(\\n    IERC20Upgradeable targetToken,\\n    uint256 targetAmount,\\n    address targetAddress\\n  ) private returns (uint256 amountIn) {\\n    ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n      tokenIn: address(nativeWrapper),\\n      tokenOut: address(targetToken),\\n      fee: 3000,\\n      recipient: targetAddress,\\n      deadline: block.timestamp,\\n      amountOut: targetAmount,\\n      amountInMaximum: msg.value,\\n      sqrtPriceLimitX96: 0\\n    });\\n    nativeWrapper.deposit{value: msg.value}();\\n    TransferHelper.safeApprove(address(nativeWrapper), address(router), msg.value);\\n    amountIn = router.exactOutputSingle(params);\\n    if (amountIn < msg.value) {\\n      // Refund ETH to user\\n      uint256 refundAmount = msg.value - amountIn;\\n      TransferHelper.safeApprove(address(nativeWrapper), address(router), 0);\\n      nativeWrapper.withdraw(refundAmount);\\n      TransferHelper.safeTransferETH(_msgSender(), refundAmount);\\n    }\\n  }\\n\\n  function swapToTargetTokenAmountIn(IERC20Upgradeable targetToken, address targetAddress)\\n    private\\n    returns (uint256 amountIn)\\n  {\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n      tokenIn: address(nativeWrapper),\\n      tokenOut: address(targetToken),\\n      fee: 3000,\\n      recipient: targetAddress,\\n      deadline: block.timestamp,\\n      amountIn: msg.value,\\n      amountOutMinimum: 0,\\n      sqrtPriceLimitX96: 0\\n    });\\n    nativeWrapper.deposit{value: msg.value}();\\n    TransferHelper.safeApprove(address(nativeWrapper), address(router), msg.value);\\n    amountIn = router.exactInputSingle(params);\\n  }\\n\\n  function buyWithTransfer(\\n    uint256 id,\\n    uint256 amount,\\n    address tokenHolder,\\n    address buyer,\\n    uint16 perk\\n  ) private {\\n    require(amount > 0, \\\"Must pass amount > 0\\\");\\n    IProductionEscrowV3 escrow = productionEscrows[id].escrow;\\n    require(amount <= escrow.getTokensAvailable(), \\\"Cannot buy more than available\\\");\\n    (IERC20Upgradeable token, uint256 price) = escrow.getTokenPrice(amount, buyer);\\n    require(token.allowance(tokenHolder, address(this)) >= price, \\\"Insufficient allowance\\\");\\n    emit TokenBought(id, buyer, amount, price, perk);\\n    token.safeTransferFrom(tokenHolder, address(this), price);\\n    token.safeTransfer(address(escrow), price);\\n    escrow.buyTokens(buyer, amount, price, perk);\\n  }\\n\\n  function emptyProduction(uint256 id) private pure returns (Production memory) {\\n    return\\n      Production({\\n        id: id,\\n        data: IProductionEscrowV3.ProductionData({\\n          id: id,\\n          creator: address(0),\\n          totalSupply: 0,\\n          organizerTokens: 0,\\n          soldCounter: 0,\\n          maxTokensUnknownBuyer: 0,\\n          currency: IERC20Upgradeable(address(0)),\\n          state: IProductionEscrowV3.ProductionState.EMPTY,\\n          dataHash: \\\"\\\",\\n          crowdsaleEndDate: 0,\\n          productionEndDate: 0,\\n          platformSharePercentage: 0,\\n          perkTracker: IPerkTrackerV3(address(0)),\\n          priceCalculationEngine: IPriceCalculationEngineV3(address(0))\\n        }),\\n        perks: new IProductionEscrowV3.Perk[](0),\\n        escrow: IProductionEscrowV3(address(0)),\\n        fundsRaised: 0,\\n        proceedsEarned: 0,\\n        escrowBalance: 0,\\n        paused: false\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x0a696e98fa99b441441d86e217046eabb49d45296d5c125f6788a166f0fc8291\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IMembersV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMembersV3 {\\n  function isOrganizer(address sender) external view returns (bool);\\n\\n  function isApprover(address sender) external view returns (bool);\\n\\n  function isInvestor(address sender) external view returns (bool);\\n\\n  function isOrganizerDelegate(address sender, address organizer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe13717c87ca09f5798dae839d18d942720bac302d04f7c6f27306fde8afd2aee\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPerkTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPerkTrackerV3 {\\n  function perkClaimed(\\n    address claimer,\\n    uint256 productionId,\\n    uint16 perkId,\\n    uint256 tokensBought\\n  ) external;\\n\\n  function registerEscrow(IProductionEscrowV3 escrow) external;\\n}\\n\",\"keccak256\":\"0x24cceb2ba26d52649efe8a6043402dbc9c452c5d63ba2e34df2bd1d8280d76ef\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPriceCalculationEngineV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPriceCalculationEngineV3 {\\n  function calculateTokenPrice(\\n    IProductionEscrowV3 escrow,\\n    IProductionEscrowV3.ProductionData calldata production,\\n    uint256 tokenBasePrice,\\n    uint256 amount,\\n    address buyer\\n  ) external view returns (IERC20Upgradeable currency, uint256 price);\\n}\\n\",\"keccak256\":\"0xc82f1e05afad1b7d746f4ffdb64d985136cfca847de0a8aa18e10e0a4f240713\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionEscrowV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IProductionTokenTrackerV3.sol\\\";\\nimport \\\"./IPriceCalculationEngineV3.sol\\\";\\nimport \\\"./IPerkTrackerV3.sol\\\";\\n\\ninterface IProductionEscrowV3 is IProductionTokenTrackerV3 {\\n  enum ProductionState {\\n    EMPTY,\\n    CREATED,\\n    OPEN,\\n    FINISHED,\\n    DECLINED,\\n    CANCELED,\\n    CLOSED\\n  }\\n\\n  struct Perk {\\n    uint16 id;\\n    uint16 total;\\n    uint16 claimed;\\n    uint256 minTokensRequired;\\n  }\\n\\n  struct Purchase {\\n    uint256 tokens;\\n    uint256 price;\\n  }\\n\\n  struct ProductionData {\\n    uint256 id;\\n    address creator;\\n    uint256 totalSupply;\\n    uint256 organizerTokens;\\n    uint256 soldCounter;\\n    uint256 maxTokensUnknownBuyer;\\n    IERC20Upgradeable currency;\\n    ProductionState state;\\n    string dataHash;\\n    uint256 crowdsaleEndDate;\\n    uint256 productionEndDate;\\n    uint8 platformSharePercentage;\\n    IPerkTrackerV3 perkTracker;\\n    IPriceCalculationEngineV3 priceCalculationEngine;\\n  }\\n\\n  // --- Events ---\\n\\n  event StateChanged(ProductionState from, ProductionState to, address by);\\n  event TokenBought(address buyer, uint256 amount, uint256 price, uint16 perkClaimed);\\n  event FundingClaimed(uint256 amount, uint256 platformShare, address by);\\n  event ProceedsDeposited(uint256 amount, address by);\\n  event ProceedsClaimed(uint256 amount, address by);\\n\\n  // --- Functions ---\\n\\n  function getProductionData() external view returns (ProductionData memory);\\n\\n  function getProductionDataWithPerks()\\n    external\\n    view\\n    returns (\\n      ProductionData memory,\\n      Perk[] memory,\\n      uint256 fundsRaised,\\n      uint256 proceedsEarned\\n    );\\n\\n  function getTokenOwnerData(address tokenOwner)\\n    external\\n    view\\n    returns (\\n      uint256 balance,\\n      Purchase[] memory purchases,\\n      Perk[] memory perks,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    );\\n\\n  function getTokensAvailable() external view returns (uint256);\\n\\n  function getTokenPrice(uint256 amount, address buyer) external view returns (IERC20Upgradeable, uint256);\\n\\n  function approve(address approver) external;\\n\\n  function decline(address decliner) external;\\n\\n  function finish(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function close(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function pause(address caller) external;\\n\\n  function unpause(address caller) external;\\n\\n  function paused() external view returns (bool);\\n\\n  function cancel(address caller, uint256 newCloseDate) external;\\n\\n  function buyTokens(\\n    address buyer,\\n    uint256 amount,\\n    uint256 price,\\n    uint16 perk\\n  ) external;\\n\\n  function depositProceeds(address caller, uint256 amount) external;\\n\\n  function transferProceeds(address tokenHolder) external returns (uint256 amount);\\n\\n  function transferFunding(address caller, address platformTreasury)\\n    external\\n    returns (uint256 amount, uint256 platformShare);\\n}\\n\",\"keccak256\":\"0x712aefc530bad87ccdf739c3a81757d97aff04a5ee20db5755c6708d438883b3\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionTokenTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IProductionTokenTrackerV3 {\\n  function onTokenTransfer(\\n    IERC1155Upgradeable tokenContract,\\n    uint256 tokenId,\\n    address currentOwner,\\n    address newOwner,\\n    uint256 numTokens\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdb0557d9b0679807c9b2d0c5fdad772686cad7f0212610b64d1242970286a730\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionTokenV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"./IProductionTokenTrackerV3.sol\\\";\\n\\ninterface IProductionTokenV3 is IERC1155Upgradeable {\\n  function mintToken(\\n    IProductionTokenTrackerV3 owner,\\n    uint256 id,\\n    uint256 totalAmount\\n  ) external;\\n\\n  function getTokenBalances(address buyer) external view returns (uint256[] memory tokenIds, uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x262542df1df9e785f102669f3df088e89c7c8e20558d25894370462dd4181c50\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionsV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IProductionsV3 {\\n  event ProductionMinted(uint256 indexed id, address indexed creator, uint256 tokenSupply, address escrow);\\n  event TokenBought(uint256 indexed id, address indexed buyer, uint256 amount, uint256 price, uint16 perkClaimed);\\n  event FundingClaimed(uint256 indexed id, address indexed buyer, uint256 amount, uint256 platformShare);\\n  event ProceedsDeposited(uint256 indexed id, address indexed creator, uint256 amount);\\n  event ProceedsClaimed(uint256 indexed id, address indexed buyer, uint256 amount);\\n\\n  struct Escrow {\\n    uint256 id;\\n    IProductionEscrowV3 escrow;\\n  }\\n\\n  struct Production {\\n    uint256 id;\\n    IProductionEscrowV3.ProductionData data;\\n    IProductionEscrowV3.Perk[] perks;\\n    IProductionEscrowV3 escrow;\\n    uint256 fundsRaised;\\n    uint256 proceedsEarned;\\n    uint256 escrowBalance;\\n    bool paused;\\n  }\\n\\n  function mintProduction(\\n    IProductionEscrowV3 escrow,\\n    address creator,\\n    uint256 totalAmount\\n  ) external returns (uint256 id);\\n\\n  function getProduction(uint256 id) external view returns (Production memory);\\n\\n  function getTokenPrice(uint256 id, uint256 amount) external view returns (IERC20Upgradeable, uint256);\\n\\n  function getTokenPriceFor(\\n    uint256 id,\\n    uint256 amount,\\n    address buyer\\n  ) external view returns (IERC20Upgradeable, uint256);\\n\\n  function getTokenOwnerData(uint256 id, address tokenOwner)\\n    external\\n    view\\n    returns (\\n      uint256 balance,\\n      IProductionEscrowV3.Purchase[] memory purchases,\\n      IProductionEscrowV3.Perk[] memory perksOwned,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    );\\n\\n  function getProductionIdsByCreator(address creator) external view returns (uint256[] memory);\\n\\n  function approve(uint256 id) external;\\n\\n  function decline(uint256 id) external;\\n\\n  function finishCrowdsale(uint256 id) external;\\n\\n  function close(uint256 id) external;\\n\\n  function pause(uint256 id) external;\\n\\n  function unpause(uint256 id) external;\\n\\n  function cancel(uint256 id, uint256 newCloseDate) external;\\n\\n  function buyTokensWithCurrency(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external payable;\\n\\n  function buyTokensWithTokens(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external;\\n\\n  function buyTokensWithFiat(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external;\\n\\n  function depositProceedsInTokens(uint256 id, uint256 amount) external;\\n\\n  function depositProceedsInCurrency(uint256 id) external payable;\\n\\n  function transferProceeds(uint256 id) external;\\n\\n  function transferFunding(uint256 id) external;\\n}\\n\",\"keccak256\":\"0x925b8e984a8794242c2bf21e0cb67bf08847e4052f77ab380fb7d54c67a0ef5b\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xdd2a9056ff96c5b97ef18c18ff78a970fd2649372777e82e7805a2b7c6943f6e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004cdb38038062004cdb833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b608051614c406200009b600039600081816103e80152613a340152614c406000f3fe6080604052600436106102335760003560e01c80638e20d8411161012e578063c3d6de82116100ab578063f09e090b1161006f578063f09e090b14610759578063f2fde38b14610779578063f850d01214610799578063f887ea40146107c6578063fabc1cbc146107ee57600080fd5b8063c3d6de82146106c6578063c7a4a53c146106e6578063cf1213ba146106f9578063cf26269914610719578063d3a598491461073957600080fd5b8063b10fee08116100f2578063b10fee08146105ec578063b5ff36d31461060c578063b759f95414610666578063bdd4d18d14610686578063c0c6e16e146106a657600080fd5b80638e20d841146105485780638f3cd58b1461056857806393057ba614610599578063a0355f4e146105b9578063af9ab635146105d957600080fd5b8063572b6c05116101bc5780636fdd1064116101805780636fdd1064146104a5578063715018a6146104d557806372259f1e146104ea5780637ec08d181461050a5780638da5cb5b1461052a57600080fd5b8063572b6c05146103cb57806361d027b3146104185780636548e9bc146104385780636dc656f2146104585780636f265d0c1461047857600080fd5b8063136439dd11610203578063136439dd146102ec5780631459457a1461030c57806314b487aa1461032c578063452c402d1461036c5780634b390d7f146103ab57600080fd5b8062efa8951461023f5780630283ae2e146102615780630aebeb4e146102945780630b48a8b8146102b457600080fd5b3661023a57005b600080fd5b34801561024b57600080fd5b5061025f61025a366004614057565b61080e565b005b34801561026d57600080fd5b5061028161027c36600461408e565b610936565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b5061025f6102af3660046140ba565b610967565b3480156102c057600080fd5b5060d1546102d4906001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b3480156102f857600080fd5b5061025f6103073660046140ba565b610a9c565b34801561031857600080fd5b5061025f6103273660046140d3565b610b81565b34801561033857600080fd5b5061035c610347366004614144565b60ca6020526000908152604090205460ff1681565b604051901515815260200161028b565b34801561037857600080fd5b5061038c610387366004614161565b610cb8565b604080516001600160a01b03909316835260208301919091520161028b565b3480156103b757600080fd5b5061025f6103c6366004614144565b610ef1565b3480156103d757600080fd5b5061035c6103e6366004614144565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561042457600080fd5b5060d0546102d4906001600160a01b031681565b34801561044457600080fd5b5061025f610453366004614144565b610f79565b34801561046457600080fd5b5061038c610473366004614057565b611002565b34801561048457600080fd5b50610498610493366004614144565b611100565b60405161028b919061419a565b3480156104b157600080fd5b5061035c6104c0366004614144565b60cb6020526000908152604090205460ff1681565b3480156104e157600080fd5b5061025f61116c565b3480156104f657600080fd5b5060ce546102d4906001600160a01b031681565b34801561051657600080fd5b5061025f6105253660046140ba565b6111df565b34801561053657600080fd5b506065546001600160a01b03166102d4565b34801561055457600080fd5b5061025f610563366004614057565b611298565b34801561057457600080fd5b506105886105833660046141de565b6115b7565b60405161028b959493929190614274565b3480156105a557600080fd5b506102816105b43660046142eb565b6117fc565b3480156105c557600080fd5b5061025f6105d43660046140ba565b611aea565b61025f6105e736600461433c565b611ba3565b3480156105f857600080fd5b5061025f610607366004614144565b612056565b34801561061857600080fd5b506106496106273660046140ba565b60cc60205260009081526040902080546001909101546001600160a01b031682565b604080519283526001600160a01b0390911660208301520161028b565b34801561067257600080fd5b5061025f6106813660046140ba565b6120de565b34801561069257600080fd5b5060cf546102d4906001600160a01b031681565b3480156106b257600080fd5b5061025f6106c1366004614144565b612197565b3480156106d257600080fd5b5061025f6106e136600461433c565b612222565b61025f6106f43660046140ba565b612336565b34801561070557600080fd5b5061025f61071436600461433c565b612565565b34801561072557600080fd5b5061025f610734366004614144565b612755565b34801561074557600080fd5b5061025f6107543660046140ba565b6127e0565b34801561076557600080fd5b5061025f6107743660046140ba565b612980565b34801561078557600080fd5b5061025f610794366004614144565b612b09565b3480156107a557600080fd5b506107b96107b43660046140ba565b612be1565b60405161028b9190614416565b3480156107d257600080fd5b506102d473e592427a0aece92de3edee1f18e0157c0586156481565b3480156107fa57600080fd5b5061025f6108093660046140ba565b612e29565b600260975414156108545760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab83398151915260448201526064015b60405180910390fd5b6002609755600082815260cc602052604090205482906108a45760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600083815260cc60205260409020600101546001600160a01b03166398590ef96108cc612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505060016097555050505050565b60cd602052816000526040600020818154811061095257600080fd5b90600052602060002001600091509150505481565b600260975414156109a85760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906109f85760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b0316639e6d77d0610a20612ede565b60d25460d05460405160e085901b6001600160e01b03191681526001600160a01b039384166004820152918316331460248301529190911660448201526064015b600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b5050600160975550505050565b60026097541415610add5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190610b2d5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166376a67a51610b55612ede565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401610a61565b6000610b8d6001612eed565b90508015610ba5576000805461ff0019166101001790555b6001600160a01b038316610bfb5760405162461bcd60e51b815260206004820152601e60248201527f5472656173757279206d7573742062652076616c696420616464726573730000604482015260640161084b565b60ce80546001600160a01b03199081166001600160a01b038981169190911790925560cf8054821688841617905560d18054821687841617905560d08054821686841617905560d2805490911691841691909117905560c980546001019055610c62613008565b610c6a61307b565b8015610cb0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600083815260cc602052604081205481908590610d055760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b038116610d5c5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b610d64612ede565b6001600160a01b0316816001600160a01b03161480610e0e575060cf546001600160a01b031663cee2a9cf610d97612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e919061458f565b610e505760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b600087815260cc6020526040908190206001015490516321f8c83960e21b8152600481018890526001600160a01b038781166024830152909116906387e320e490604401604080518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee391906145bc565b935093505050935093915050565b610ef9612ede565b6001600160a01b0316610f146065546001600160a01b031690565b6001600160a01b031614610f585760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260ca60205260409020805460ff19169055565b610f81612ede565b6001600160a01b0316610f9c6065546001600160a01b031690565b6001600160a01b031614610fe05760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260cc60205260408120548190849061104f5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600085815260cc60205260409020600101546001600160a01b03166387e320e485611078612ede565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401604080518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f491906145bc565b92509250509250929050565b6001600160a01b038116600090815260cd602090815260409182902080548351818402810184019094528084526060939283018282801561116057602002820191906000526020600020905b81548152602001906001019080831161114c575b50505050509050919050565b611174612ede565b6001600160a01b031661118f6065546001600160a01b031690565b6001600160a01b0316146111d35760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6111dd60006130ee565b565b600260975414156112205760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906112705760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b031663201dfbce610a20612ede565b600260975414156112d95760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600082815260cc602052604090205482906113295760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600083815260cc6020526040808220600101548151639b54a81760e01b815291516001600160a01b0390911691639b54a8179160048083019286929190829003018186803b15801561137a57600080fd5b505afa15801561138e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b69190810190614823565b60c08101516020820151604051636eb1769f60e11b81526001600160a01b0391821660048201523060248201529293509091859183169063dd62ed3e9060440160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190614858565b10156114945760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161084b565b60208201516114af906001600160a01b038316903087613140565b600085815260cc60205260409020600101546114d8906001600160a01b038381169116866131b1565b600085815260cc60205260409020600101546001600160a01b031663bd55db3a611500612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801561154857600080fd5b505af115801561155c573d6000803e3d6000fd5b50505050611568612ede565b6001600160a01b0316857f07c5b0ee196554c56f6c71c243649abee344214e9147a7c9c81673b0f0657d51866040516115a391815260200190565b60405180910390a350506001609755505050565b600082815260cc6020526040812054606090819083908190879061160b5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b866001600160a01b0381166116625760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b61166a612ede565b6001600160a01b0316816001600160a01b03161480611714575060cf546001600160a01b031663cee2a9cf61169d612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611714919061458f565b6117565760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b600089815260cc6020526040908190206001015490516341c0bf8d60e11b81526001600160a01b038a81166004830152909116906383817f1a9060240160006040518083038186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117e79190810190614953565b939d929c50909a509850909650945050505050565b60006002609754141561183f5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b600260975560ca6000611850612ede565b6001600160a01b0316815260208101919091526040016000205460ff166118b95760405162461bcd60e51b815260206004820152601860248201527f556e7472757374656420457363726f7720466163746f72790000000000000000604482015260640161084b565b60cb6000856001600160a01b0316639b54a8176040518163ffffffff1660e01b815260040160006040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119329190810190614823565b60c001516001600160a01b0316815260208101919091526040016000205460ff1661199f5760405162461bcd60e51b815260206004820152601360248201527f556e6b6e6f776e20455243323020746f6b656e00000000000000000000000000604482015260640161084b565b5060c954604080518381526001600160a01b03868116602083015285169183917f9d94293606bd346fb9292dbec161dbbb0a0369bfb381ecc98a5c1dd08d8b8723910160405180910390a36040805180820182528281526001600160a01b038087166020808401918252600086815260cc9091529390932091518255915160019091018054919092166001600160a01b0319909116179055611a4560c980546001019055565b60ce546040516323a36d2b60e01b81526001600160a01b0386811660048301526024820184905260448201859052909116906323a36d2b90606401600060405180830381600087803b158015611a9a57600080fd5b505af1158015611aae573d6000803e3d6000fd5b5050506001600160a01b03909316600090815260cd60209081526040822080546001818101835591845291909220018290556097559392505050565b60026097541415611b2b5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190611b7b5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166310e29cf9610b55612ede565b60026097541415611be45760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc60205260409020548490611c345760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b038116611c8b5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b611c93612ede565b6001600160a01b0316816001600160a01b03161480611d3d575060cf546001600160a01b031663cee2a9cf611cc6612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611d0557600080fd5b505afa158015611d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3d919061458f565b611d7f5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b60008411611dc65760405162461bcd60e51b815260206004820152601460248201527304d757374207061737320616d6f756e74203e20360641b604482015260640161084b565b60003411611e165760405162461bcd60e51b815260206004820152601760248201527f4d7573742070617373206d73672e76616c7565203e2030000000000000000000604482015260640161084b565b600086815260cc602090815260409182902060010154825163aaa5ad6160e01b815292516001600160a01b0390911692839263aaa5ad6192600480840193829003018186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190614858565b851115611eef5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420627579206d6f7265207468616e20617661696c61626c650000604482015260640161084b565b6040516321f8c83960e21b8152600481018690526001600160a01b03878116602483015260009182918416906387e320e490604401604080518083038186803b158015611f3b57600080fd5b505afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7391906145bc565b91509150611f828282856131e6565b50604080518881526020810183905261ffff88168183015290516001600160a01b038a16918b917ffc30850f2040b53a580f146e0f19adff30f013111447180caa350a0a36f2422d9181900360600190a36040516327674bef60e21b81526001600160a01b038981166004830152602482018990526044820183905261ffff88166064830152841690639d9d2fbc90608401600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505060016097555050505050505050505050565b61205e612ede565b6001600160a01b03166120796065546001600160a01b031690565b6001600160a01b0316146120bd5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260cb60205260409020805460ff19169055565b6002609754141561211f5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc6020526040902054819061216f5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b031663daea85c5610b55612ede565b61219f612ede565b6001600160a01b03166121ba6065546001600160a01b031690565b6001600160a01b0316146121fe5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b600260975414156122635760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc602052604090205484906122b35760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b60d2546001600160a01b0316331461231d5760405162461bcd60e51b815260206004820152602760248201527f43616e206f6e6c792062652063616c6c65642066726f6d2074727573746564206044820152663932b630bcb2b960c91b606482015260840161084b565b61232a85843387866133fa565b50506001609755505050565b600260975414156123775760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906123c75760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc6020526040808220600101548151639b54a81760e01b815291516001600160a01b0390911691639b54a8179160048083019286929190829003018186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124549190810190614823565b60c0810151600085815260cc602052604081206001015492935090916124849083906001600160a01b0316613769565b905061248e612ede565b6001600160a01b0316857f07c5b0ee196554c56f6c71c243649abee344214e9147a7c9c81673b0f0657d51836040516124c991815260200190565b60405180910390a3600085815260cc60205260409020600101546001600160a01b031663bd55db3a6124f9612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561254157600080fd5b505af1158015612555573d6000803e3d6000fd5b5050600160975550505050505050565b600260975414156125a65760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc602052604090205484906125f65760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b03811661264d5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b612655612ede565b6001600160a01b0316816001600160a01b031614806126ff575060cf546001600160a01b031663cee2a9cf612688612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156126c757600080fd5b505afa1580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff919061458f565b6127415760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b610a8f868561274e612ede565b88876133fa565b61275d612ede565b6001600160a01b03166127786065546001600160a01b031690565b6001600160a01b0316146127bc5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260cb60205260409020805460ff19166001179055565b600260975414156128215760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906128715760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc602052604081206001015481906001600160a01b0316631d29572761289b612ede565b60d05460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044016040805180830381600087803b1580156128e557600080fd5b505af11580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190614a50565b91509150612929612ede565b6001600160a01b0316847f96c7a1d0f5191e2cdf0ba542b0283e6377d7f923f837e043c9f66fbdfcb03ff3848460405161296d929190918252602082015260400190565b60405180910390a3505060016097555050565b600260975414156129c15760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190612a115760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260408120600101546001600160a01b031663fc33962c612a39612ede565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015612a7a57600080fd5b505af1158015612a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab29190614858565b9050612abc612ede565b6001600160a01b0316837f59ef3b0aa7753fe308ca62cf762e6595575b067925f4c6a9e8c52351e0bfa58883604051612af791815260200190565b60405180910390a35050600160975550565b612b11612ede565b6001600160a01b0316612b2c6065546001600160a01b031690565b6001600160a01b031614612b705760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b038116612bd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161084b565b612bde816130ee565b50565b612be9613f5a565b600082815260cc6020526040902054612c0b57612c05826138c7565b92915050565b600082815260cc602052604080822060010154815163e36e196960e01b815291518392839283926001600160a01b039091169163e36e19699160048083019286929190829003018186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9e9190810190614a74565b60c084015160008b815260cc60205260408082206001015490516370a0823160e01b81526001600160a01b039182166004820152969a5094985092965090945090929116906370a082319060240160206040518083038186803b158015612d0457600080fd5b505afa158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c9190614858565b600088815260cc60209081526040808320600101548151635c975abb60e01b8152915194955092936001600160a01b0390931692635c975abb92600480840193919291829003018186803b158015612d9357600080fd5b505afa158015612da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcb919061458f565b60408051610100810182528a8152602080820199909952808201979097526000998a5260cc90975295909720600101546001600160a01b03166060850152608084019290925260a083015260c082015290151560e082015292915050565b60026097541415612e6a5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190612eba5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166357b001f9610b555b6000612ee8613a30565b905090565b60008054610100900460ff1615612f7b578160ff166001148015612f105750303b155b612f735760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b506000919050565b60005460ff808416911610612fe95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166130735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613a75565b600054610100900460ff166130e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613af0565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526131ab9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b62565b50505050565b6040516001600160a01b0383166024820152604481018290526131e190849063a9059cbb60e01b90606401613174565b505050565b604080516101008101825260d1546001600160a01b039081168083528682166020840152610bb883850152908416606083015242608083015260a082018590523460c08301819052600060e084018190528451630d0e30db60e41b81529451909463d0e30db092916004808301928892919082900301818588803b15801561326d57600080fd5b505af1158015613281573d6000803e3d6000fd5b505060d1546132b393506001600160a01b0316915073e592427a0aece92de3edee1f18e0157c05861564905034613c34565b604051631b67c43360e31b815273e592427a0aece92de3edee1f18e0157c058615649063db3e2198906132ea908490600401614ae8565b602060405180830381600087803b15801561330457600080fd5b505af1158015613318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333c9190614858565b9150348210156133f25760006133528334614b56565b60d154909150613381906001600160a01b031673e592427a0aece92de3edee1f18e0157c058615646000613c34565b60d154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156133c757600080fd5b505af11580156133db573d6000803e3d6000fd5b505050506133f06133ea612ede565b82613d34565b505b509392505050565b600084116134415760405162461bcd60e51b815260206004820152601460248201527304d757374207061737320616d6f756e74203e20360641b604482015260640161084b565b600085815260cc602090815260409182902060010154825163aaa5ad6160e01b815292516001600160a01b0390911692839263aaa5ad6192600480840193829003018186803b15801561349357600080fd5b505afa1580156134a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cb9190614858565b85111561351a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420627579206d6f7265207468616e20617661696c61626c650000604482015260640161084b565b6040516321f8c83960e21b8152600481018690526001600160a01b03848116602483015260009182918416906387e320e490604401604080518083038186803b15801561356657600080fd5b505afa15801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e91906145bc565b604051636eb1769f60e11b81526001600160a01b038981166004830152306024830152929450909250829184169063dd62ed3e9060440160206040518083038186803b1580156135ed57600080fd5b505afa158015613601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136259190614858565b10156136735760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161084b565b604080518881526020810183905261ffff86168183015290516001600160a01b038716918a917ffc30850f2040b53a580f146e0f19adff30f013111447180caa350a0a36f2422d9181900360600190a36136d86001600160a01b038316873084613140565b6136ec6001600160a01b03831684836131b1565b6040516327674bef60e21b81526001600160a01b038681166004830152602482018990526044820183905261ffff86166064830152841690639d9d2fbc90608401600060405180830381600087803b15801561374757600080fd5b505af115801561375b573d6000803e3d6000fd5b505050505050505050505050565b604080516101008101825260d1546001600160a01b039081168083528582166020840152610bb88385015290841660608301524260808301523460a08301819052600060c0840181905260e084018190528451630d0e30db60e41b81529451909463d0e30db092916004808301928892919082900301818588803b1580156137f057600080fd5b505af1158015613804573d6000803e3d6000fd5b505060d15461383693506001600160a01b0316915073e592427a0aece92de3edee1f18e0157c05861564905034613c34565b60405163414bf38960e01b815273e592427a0aece92de3edee1f18e0157c058615649063414bf3899061386d908490600401614ae8565b602060405180830381600087803b15801561388757600080fd5b505af115801561389b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bf9190614858565b949350505050565b6138cf613f5a565b604051806101000160405280838152602001604051806101c0016040528085815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000600681111561394257613942614386565b81526020016040518060200160405280600081525081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b03168152508152602001600067ffffffffffffffff8111156139b1576139b16145ea565b604051908082528060200260200182016040528015613a0357816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816139cf5790505b50815260006020820181905260408201819052606082018190526080820181905260a09091015292915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415613a70575060131936013560601c90565b503390565b600054610100900460ff16613ae05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613aeb612ede565b6130ee565b600054610100900460ff16613b5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6001609755565b6000613bb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dd79092919063ffffffff16565b8051909150156131e15780806020019051810190613bd5919061458f565b6131e15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161084b565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691613c909190614b7b565b6000604051808303816000865af19150503d8060008114613ccd576040519150601f19603f3d011682016040523d82523d6000602084013e613cd2565b606091505b5091509150818015613cfc575080511580613cfc575080806020019051810190613cfc919061458f565b613d2d5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161084b565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051613d5e9190614b7b565b60006040518083038185875af1925050503d8060008114613d9b576040519150601f19603f3d011682016040523d82523d6000602084013e613da0565b606091505b50509050806131e15760405162461bcd60e51b815260206004820152600360248201526253544560e81b604482015260640161084b565b6060613de68484600085613df0565b90505b9392505050565b606082471015613e515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161084b565b6001600160a01b0385163b613ea85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161084b565b600080866001600160a01b03168587604051613ec49190614b7b565b60006040518083038185875af1925050503d8060008114613f01576040519150601f19603f3d011682016040523d82523d6000602084013e613f06565b606091505b5091509150613f16828286613f21565b979650505050505050565b60608315613f30575081613de9565b825115613f405782518084602001fd5b8160405162461bcd60e51b815260040161084b9190614b97565b60405180610100016040528060008152602001613f75613fb0565b81526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b604051806101c001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000600681111561401257614012614386565b8152602001606081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6000806040838503121561406a57600080fd5b50508035926020909101359150565b6001600160a01b0381168114612bde57600080fd5b600080604083850312156140a157600080fd5b82356140ac81614079565b946020939093013593505050565b6000602082840312156140cc57600080fd5b5035919050565b600080600080600060a086880312156140eb57600080fd5b85356140f681614079565b9450602086013561410681614079565b9350604086013561411681614079565b9250606086013561412681614079565b9150608086013561413681614079565b809150509295509295909350565b60006020828403121561415657600080fd5b8135613de981614079565b60008060006060848603121561417657600080fd5b8335925060208401359150604084013561418f81614079565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156141d2578351835292840192918401916001016141b6565b50909695505050505050565b600080604083850312156141f157600080fd5b82359150602083013561420381614079565b809150509250929050565b600081518084526020808501945080840160005b83811015614269578151805161ffff9081168952848201518116858a0152604080830151909116908901526060908101519088015260809096019590820190600101614222565b509495945050505050565b600060a08201878352602060a08185015281885180845260c086019150828a01935060005b818110156142c0578451805184528401518484015293830193604090920191600101614299565b505084810360408601526142d4818961420e565b606086019790975250505050608001529392505050565b60008060006060848603121561430057600080fd5b833561430b81614079565b9250602084013561431b81614079565b929592945050506040919091013590565b61ffff81168114612bde57600080fd5b6000806000806080858703121561435257600080fd5b84359350602085013561436481614079565b925060408501359150606085013561437b8161432c565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b600781106143ba57634e487b7160e01b600052602160045260246000fd5b9052565b60005b838110156143d95781810151838201526020016143c1565b838111156131ab5750506000910152565b600081518084526144028160208601602086016143be565b601f01601f19169290920160200192915050565b6020815260006101208351602084015260208401516101008060408601528151838601526020820151610140614456818801836001600160a01b03169052565b6040840151610160888101919091526060850151610180808a019190915260808601516101a0808b019190915260a08701516101c0808c019190915260c08801516001600160a01b03166101e08c015260e088015195506144bb6102008c018761439c565b868801519550806102208c0152506144d76102e08b01866143ea565b978701516102408b0152928601516102608a01529085015160ff166102808901528401516001600160a01b039081166102a089015290840151166102c0870152506040860151858403601f1901606087015292614534818561420e565b9350506060860151915061455360808601836001600160a01b03169052565b608086015160a086015260a086015160c086015260c086015160e086015260e086015191506145858186018315159052565b5090949350505050565b6000602082840312156145a157600080fd5b81518015158114613de957600080fd5b805161300381614079565b600080604083850312156145cf57600080fd5b82516145da81614079565b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715614624576146246145ea565b60405290565b6040516080810167ffffffffffffffff81118282101715614624576146246145ea565b6040805190810167ffffffffffffffff81118282101715614624576146246145ea565b604051601f8201601f1916810167ffffffffffffffff81118282101715614699576146996145ea565b604052919050565b80516007811061300357600080fd5b600082601f8301126146c157600080fd5b815167ffffffffffffffff8111156146db576146db6145ea565b6146ee601f8201601f1916602001614670565b81815284602083860101111561470357600080fd5b6138bf8260208301602087016143be565b805160ff8116811461300357600080fd5b60006101c0828403121561473857600080fd5b614740614600565b905081518152614752602083016145b1565b602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261478b60c083016145b1565b60c082015261479c60e083016146a1565b60e08201526101008083015167ffffffffffffffff8111156147bd57600080fd5b6147c9858286016146b0565b8284015250506101208083015181830152506101408083015181830152506101606147f5818401614714565b908201526101806148078382016145b1565b908201526101a06148198382016145b1565b9082015292915050565b60006020828403121561483557600080fd5b815167ffffffffffffffff81111561484c57600080fd5b6138bf84828501614725565b60006020828403121561486a57600080fd5b5051919050565b600067ffffffffffffffff82111561488b5761488b6145ea565b5060051b60200190565b600082601f8301126148a657600080fd5b815160206148bb6148b683614871565b614670565b82815260079290921b840181019181810190868411156148da57600080fd5b8286015b8481101561494857608081890312156148f75760008081fd5b6148ff61462a565b815161490a8161432c565b8152818501516149198161432c565b8186015260408281015161492c8161432c565b90820152606082810151908201528352918301916080016148de565b509695505050505050565b600080600080600060a0868803121561496b57600080fd5b8551945060208087015167ffffffffffffffff8082111561498b57600080fd5b818901915089601f83011261499f57600080fd5b81516149ad6148b682614871565b81815260069190911b8301840190848101908c8311156149cc57600080fd5b938501935b82851015614a0f576040858e0312156149ea5760008081fd5b6149f261464d565b8551815286860151878201528252604090940193908501906149d1565b60408c01519099509450505080831115614a2857600080fd5b5050614a3688828901614895565b606088015160809098015196999598509695949350505050565b60008060408385031215614a6357600080fd5b505080516020909101519092909150565b60008060008060808587031215614a8a57600080fd5b845167ffffffffffffffff80821115614aa257600080fd5b614aae88838901614725565b95506020870151915080821115614ac457600080fd5b50614ad187828801614895565b604087015160609097015195989097509350505050565b6101008101612c0582846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b600082821015614b7657634e487b7160e01b600052601160045260246000fd5b500390565b60008251614b8d8184602087016143be565b9190910192915050565b602081526000613de960208301846143ea56fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c0050726f64756374696f6e20646f6573206e6f74206578697374000000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122022415fab53596bae07a86a8cac2bf8c986c8e4d1b9ada751336c993f447bd78364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102335760003560e01c80638e20d8411161012e578063c3d6de82116100ab578063f09e090b1161006f578063f09e090b14610759578063f2fde38b14610779578063f850d01214610799578063f887ea40146107c6578063fabc1cbc146107ee57600080fd5b8063c3d6de82146106c6578063c7a4a53c146106e6578063cf1213ba146106f9578063cf26269914610719578063d3a598491461073957600080fd5b8063b10fee08116100f2578063b10fee08146105ec578063b5ff36d31461060c578063b759f95414610666578063bdd4d18d14610686578063c0c6e16e146106a657600080fd5b80638e20d841146105485780638f3cd58b1461056857806393057ba614610599578063a0355f4e146105b9578063af9ab635146105d957600080fd5b8063572b6c05116101bc5780636fdd1064116101805780636fdd1064146104a5578063715018a6146104d557806372259f1e146104ea5780637ec08d181461050a5780638da5cb5b1461052a57600080fd5b8063572b6c05146103cb57806361d027b3146104185780636548e9bc146104385780636dc656f2146104585780636f265d0c1461047857600080fd5b8063136439dd11610203578063136439dd146102ec5780631459457a1461030c57806314b487aa1461032c578063452c402d1461036c5780634b390d7f146103ab57600080fd5b8062efa8951461023f5780630283ae2e146102615780630aebeb4e146102945780630b48a8b8146102b457600080fd5b3661023a57005b600080fd5b34801561024b57600080fd5b5061025f61025a366004614057565b61080e565b005b34801561026d57600080fd5b5061028161027c36600461408e565b610936565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b5061025f6102af3660046140ba565b610967565b3480156102c057600080fd5b5060d1546102d4906001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b3480156102f857600080fd5b5061025f6103073660046140ba565b610a9c565b34801561031857600080fd5b5061025f6103273660046140d3565b610b81565b34801561033857600080fd5b5061035c610347366004614144565b60ca6020526000908152604090205460ff1681565b604051901515815260200161028b565b34801561037857600080fd5b5061038c610387366004614161565b610cb8565b604080516001600160a01b03909316835260208301919091520161028b565b3480156103b757600080fd5b5061025f6103c6366004614144565b610ef1565b3480156103d757600080fd5b5061035c6103e6366004614144565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561042457600080fd5b5060d0546102d4906001600160a01b031681565b34801561044457600080fd5b5061025f610453366004614144565b610f79565b34801561046457600080fd5b5061038c610473366004614057565b611002565b34801561048457600080fd5b50610498610493366004614144565b611100565b60405161028b919061419a565b3480156104b157600080fd5b5061035c6104c0366004614144565b60cb6020526000908152604090205460ff1681565b3480156104e157600080fd5b5061025f61116c565b3480156104f657600080fd5b5060ce546102d4906001600160a01b031681565b34801561051657600080fd5b5061025f6105253660046140ba565b6111df565b34801561053657600080fd5b506065546001600160a01b03166102d4565b34801561055457600080fd5b5061025f610563366004614057565b611298565b34801561057457600080fd5b506105886105833660046141de565b6115b7565b60405161028b959493929190614274565b3480156105a557600080fd5b506102816105b43660046142eb565b6117fc565b3480156105c557600080fd5b5061025f6105d43660046140ba565b611aea565b61025f6105e736600461433c565b611ba3565b3480156105f857600080fd5b5061025f610607366004614144565b612056565b34801561061857600080fd5b506106496106273660046140ba565b60cc60205260009081526040902080546001909101546001600160a01b031682565b604080519283526001600160a01b0390911660208301520161028b565b34801561067257600080fd5b5061025f6106813660046140ba565b6120de565b34801561069257600080fd5b5060cf546102d4906001600160a01b031681565b3480156106b257600080fd5b5061025f6106c1366004614144565b612197565b3480156106d257600080fd5b5061025f6106e136600461433c565b612222565b61025f6106f43660046140ba565b612336565b34801561070557600080fd5b5061025f61071436600461433c565b612565565b34801561072557600080fd5b5061025f610734366004614144565b612755565b34801561074557600080fd5b5061025f6107543660046140ba565b6127e0565b34801561076557600080fd5b5061025f6107743660046140ba565b612980565b34801561078557600080fd5b5061025f610794366004614144565b612b09565b3480156107a557600080fd5b506107b96107b43660046140ba565b612be1565b60405161028b9190614416565b3480156107d257600080fd5b506102d473e592427a0aece92de3edee1f18e0157c0586156481565b3480156107fa57600080fd5b5061025f6108093660046140ba565b612e29565b600260975414156108545760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab83398151915260448201526064015b60405180910390fd5b6002609755600082815260cc602052604090205482906108a45760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600083815260cc60205260409020600101546001600160a01b03166398590ef96108cc612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505060016097555050505050565b60cd602052816000526040600020818154811061095257600080fd5b90600052602060002001600091509150505481565b600260975414156109a85760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906109f85760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b0316639e6d77d0610a20612ede565b60d25460d05460405160e085901b6001600160e01b03191681526001600160a01b039384166004820152918316331460248301529190911660448201526064015b600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b5050600160975550505050565b60026097541415610add5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190610b2d5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166376a67a51610b55612ede565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401610a61565b6000610b8d6001612eed565b90508015610ba5576000805461ff0019166101001790555b6001600160a01b038316610bfb5760405162461bcd60e51b815260206004820152601e60248201527f5472656173757279206d7573742062652076616c696420616464726573730000604482015260640161084b565b60ce80546001600160a01b03199081166001600160a01b038981169190911790925560cf8054821688841617905560d18054821687841617905560d08054821686841617905560d2805490911691841691909117905560c980546001019055610c62613008565b610c6a61307b565b8015610cb0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600083815260cc602052604081205481908590610d055760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b038116610d5c5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b610d64612ede565b6001600160a01b0316816001600160a01b03161480610e0e575060cf546001600160a01b031663cee2a9cf610d97612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e919061458f565b610e505760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b600087815260cc6020526040908190206001015490516321f8c83960e21b8152600481018890526001600160a01b038781166024830152909116906387e320e490604401604080518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee391906145bc565b935093505050935093915050565b610ef9612ede565b6001600160a01b0316610f146065546001600160a01b031690565b6001600160a01b031614610f585760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260ca60205260409020805460ff19169055565b610f81612ede565b6001600160a01b0316610f9c6065546001600160a01b031690565b6001600160a01b031614610fe05760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260cc60205260408120548190849061104f5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600085815260cc60205260409020600101546001600160a01b03166387e320e485611078612ede565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401604080518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f491906145bc565b92509250509250929050565b6001600160a01b038116600090815260cd602090815260409182902080548351818402810184019094528084526060939283018282801561116057602002820191906000526020600020905b81548152602001906001019080831161114c575b50505050509050919050565b611174612ede565b6001600160a01b031661118f6065546001600160a01b031690565b6001600160a01b0316146111d35760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6111dd60006130ee565b565b600260975414156112205760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906112705760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b031663201dfbce610a20612ede565b600260975414156112d95760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600082815260cc602052604090205482906113295760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600083815260cc6020526040808220600101548151639b54a81760e01b815291516001600160a01b0390911691639b54a8179160048083019286929190829003018186803b15801561137a57600080fd5b505afa15801561138e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b69190810190614823565b60c08101516020820151604051636eb1769f60e11b81526001600160a01b0391821660048201523060248201529293509091859183169063dd62ed3e9060440160206040518083038186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114469190614858565b10156114945760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161084b565b60208201516114af906001600160a01b038316903087613140565b600085815260cc60205260409020600101546114d8906001600160a01b038381169116866131b1565b600085815260cc60205260409020600101546001600160a01b031663bd55db3a611500612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801561154857600080fd5b505af115801561155c573d6000803e3d6000fd5b50505050611568612ede565b6001600160a01b0316857f07c5b0ee196554c56f6c71c243649abee344214e9147a7c9c81673b0f0657d51866040516115a391815260200190565b60405180910390a350506001609755505050565b600082815260cc6020526040812054606090819083908190879061160b5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b866001600160a01b0381166116625760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b61166a612ede565b6001600160a01b0316816001600160a01b03161480611714575060cf546001600160a01b031663cee2a9cf61169d612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611714919061458f565b6117565760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b600089815260cc6020526040908190206001015490516341c0bf8d60e11b81526001600160a01b038a81166004830152909116906383817f1a9060240160006040518083038186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117e79190810190614953565b939d929c50909a509850909650945050505050565b60006002609754141561183f5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b600260975560ca6000611850612ede565b6001600160a01b0316815260208101919091526040016000205460ff166118b95760405162461bcd60e51b815260206004820152601860248201527f556e7472757374656420457363726f7720466163746f72790000000000000000604482015260640161084b565b60cb6000856001600160a01b0316639b54a8176040518163ffffffff1660e01b815260040160006040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119329190810190614823565b60c001516001600160a01b0316815260208101919091526040016000205460ff1661199f5760405162461bcd60e51b815260206004820152601360248201527f556e6b6e6f776e20455243323020746f6b656e00000000000000000000000000604482015260640161084b565b5060c954604080518381526001600160a01b03868116602083015285169183917f9d94293606bd346fb9292dbec161dbbb0a0369bfb381ecc98a5c1dd08d8b8723910160405180910390a36040805180820182528281526001600160a01b038087166020808401918252600086815260cc9091529390932091518255915160019091018054919092166001600160a01b0319909116179055611a4560c980546001019055565b60ce546040516323a36d2b60e01b81526001600160a01b0386811660048301526024820184905260448201859052909116906323a36d2b90606401600060405180830381600087803b158015611a9a57600080fd5b505af1158015611aae573d6000803e3d6000fd5b5050506001600160a01b03909316600090815260cd60209081526040822080546001818101835591845291909220018290556097559392505050565b60026097541415611b2b5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190611b7b5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166310e29cf9610b55612ede565b60026097541415611be45760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc60205260409020548490611c345760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b038116611c8b5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b611c93612ede565b6001600160a01b0316816001600160a01b03161480611d3d575060cf546001600160a01b031663cee2a9cf611cc6612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611d0557600080fd5b505afa158015611d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3d919061458f565b611d7f5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b60008411611dc65760405162461bcd60e51b815260206004820152601460248201527304d757374207061737320616d6f756e74203e20360641b604482015260640161084b565b60003411611e165760405162461bcd60e51b815260206004820152601760248201527f4d7573742070617373206d73672e76616c7565203e2030000000000000000000604482015260640161084b565b600086815260cc602090815260409182902060010154825163aaa5ad6160e01b815292516001600160a01b0390911692839263aaa5ad6192600480840193829003018186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190614858565b851115611eef5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420627579206d6f7265207468616e20617661696c61626c650000604482015260640161084b565b6040516321f8c83960e21b8152600481018690526001600160a01b03878116602483015260009182918416906387e320e490604401604080518083038186803b158015611f3b57600080fd5b505afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7391906145bc565b91509150611f828282856131e6565b50604080518881526020810183905261ffff88168183015290516001600160a01b038a16918b917ffc30850f2040b53a580f146e0f19adff30f013111447180caa350a0a36f2422d9181900360600190a36040516327674bef60e21b81526001600160a01b038981166004830152602482018990526044820183905261ffff88166064830152841690639d9d2fbc90608401600060405180830381600087803b15801561202e57600080fd5b505af1158015612042573d6000803e3d6000fd5b505060016097555050505050505050505050565b61205e612ede565b6001600160a01b03166120796065546001600160a01b031690565b6001600160a01b0316146120bd5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260cb60205260409020805460ff19169055565b6002609754141561211f5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc6020526040902054819061216f5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b031663daea85c5610b55612ede565b61219f612ede565b6001600160a01b03166121ba6065546001600160a01b031690565b6001600160a01b0316146121fe5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260ca60205260409020805460ff19166001179055565b600260975414156122635760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc602052604090205484906122b35760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b60d2546001600160a01b0316331461231d5760405162461bcd60e51b815260206004820152602760248201527f43616e206f6e6c792062652063616c6c65642066726f6d2074727573746564206044820152663932b630bcb2b960c91b606482015260840161084b565b61232a85843387866133fa565b50506001609755505050565b600260975414156123775760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906123c75760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc6020526040808220600101548151639b54a81760e01b815291516001600160a01b0390911691639b54a8179160048083019286929190829003018186803b15801561241857600080fd5b505afa15801561242c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124549190810190614823565b60c0810151600085815260cc602052604081206001015492935090916124849083906001600160a01b0316613769565b905061248e612ede565b6001600160a01b0316857f07c5b0ee196554c56f6c71c243649abee344214e9147a7c9c81673b0f0657d51836040516124c991815260200190565b60405180910390a3600085815260cc60205260409020600101546001600160a01b031663bd55db3a6124f9612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561254157600080fd5b505af1158015612555573d6000803e3d6000fd5b5050600160975550505050505050565b600260975414156125a65760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600084815260cc602052604090205484906125f65760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b836001600160a01b03811661264d5760405162461bcd60e51b815260206004820152601b60248201527f4275796572206d7573742062652076616c696420616464726573730000000000604482015260640161084b565b612655612ede565b6001600160a01b0316816001600160a01b031614806126ff575060cf546001600160a01b031663cee2a9cf612688612ede565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156126c757600080fd5b505afa1580156126db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ff919061458f565b6127415760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103a37b5b2b710313abcb2b960691b604482015260640161084b565b610a8f868561274e612ede565b88876133fa565b61275d612ede565b6001600160a01b03166127786065546001600160a01b031690565b6001600160a01b0316146127bc5760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b0316600090815260cb60205260409020805460ff19166001179055565b600260975414156128215760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc602052604090205481906128715760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc602052604081206001015481906001600160a01b0316631d29572761289b612ede565b60d05460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044016040805180830381600087803b1580156128e557600080fd5b505af11580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190614a50565b91509150612929612ede565b6001600160a01b0316847f96c7a1d0f5191e2cdf0ba542b0283e6377d7f923f837e043c9f66fbdfcb03ff3848460405161296d929190918252602082015260400190565b60405180910390a3505060016097555050565b600260975414156129c15760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190612a115760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260408120600101546001600160a01b031663fc33962c612a39612ede565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015612a7a57600080fd5b505af1158015612a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab29190614858565b9050612abc612ede565b6001600160a01b0316837f59ef3b0aa7753fe308ca62cf762e6595575b067925f4c6a9e8c52351e0bfa58883604051612af791815260200190565b60405180910390a35050600160975550565b612b11612ede565b6001600160a01b0316612b2c6065546001600160a01b031690565b6001600160a01b031614612b705760405162461bcd60e51b81526020600482018190526024820152600080516020614beb833981519152604482015260640161084b565b6001600160a01b038116612bd55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161084b565b612bde816130ee565b50565b612be9613f5a565b600082815260cc6020526040902054612c0b57612c05826138c7565b92915050565b600082815260cc602052604080822060010154815163e36e196960e01b815291518392839283926001600160a01b039091169163e36e19699160048083019286929190829003018186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c9e9190810190614a74565b60c084015160008b815260cc60205260408082206001015490516370a0823160e01b81526001600160a01b039182166004820152969a5094985092965090945090929116906370a082319060240160206040518083038186803b158015612d0457600080fd5b505afa158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c9190614858565b600088815260cc60209081526040808320600101548151635c975abb60e01b8152915194955092936001600160a01b0390931692635c975abb92600480840193919291829003018186803b158015612d9357600080fd5b505afa158015612da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcb919061458f565b60408051610100810182528a8152602080820199909952808201979097526000998a5260cc90975295909720600101546001600160a01b03166060850152608084019290925260a083015260c082015290151560e082015292915050565b60026097541415612e6a5760405162461bcd60e51b815260206004820152601f6024820152600080516020614bab833981519152604482015260640161084b565b6002609755600081815260cc60205260409020548190612eba5760405162461bcd60e51b81526020600482015260196024820152600080516020614bcb833981519152604482015260640161084b565b600082815260cc60205260409020600101546001600160a01b03166357b001f9610b555b6000612ee8613a30565b905090565b60008054610100900460ff1615612f7b578160ff166001148015612f105750303b155b612f735760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b506000919050565b60005460ff808416911610612fe95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161084b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166130735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613a75565b600054610100900460ff166130e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613af0565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526131ab9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b62565b50505050565b6040516001600160a01b0383166024820152604481018290526131e190849063a9059cbb60e01b90606401613174565b505050565b604080516101008101825260d1546001600160a01b039081168083528682166020840152610bb883850152908416606083015242608083015260a082018590523460c08301819052600060e084018190528451630d0e30db60e41b81529451909463d0e30db092916004808301928892919082900301818588803b15801561326d57600080fd5b505af1158015613281573d6000803e3d6000fd5b505060d1546132b393506001600160a01b0316915073e592427a0aece92de3edee1f18e0157c05861564905034613c34565b604051631b67c43360e31b815273e592427a0aece92de3edee1f18e0157c058615649063db3e2198906132ea908490600401614ae8565b602060405180830381600087803b15801561330457600080fd5b505af1158015613318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333c9190614858565b9150348210156133f25760006133528334614b56565b60d154909150613381906001600160a01b031673e592427a0aece92de3edee1f18e0157c058615646000613c34565b60d154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156133c757600080fd5b505af11580156133db573d6000803e3d6000fd5b505050506133f06133ea612ede565b82613d34565b505b509392505050565b600084116134415760405162461bcd60e51b815260206004820152601460248201527304d757374207061737320616d6f756e74203e20360641b604482015260640161084b565b600085815260cc602090815260409182902060010154825163aaa5ad6160e01b815292516001600160a01b0390911692839263aaa5ad6192600480840193829003018186803b15801561349357600080fd5b505afa1580156134a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cb9190614858565b85111561351a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420627579206d6f7265207468616e20617661696c61626c650000604482015260640161084b565b6040516321f8c83960e21b8152600481018690526001600160a01b03848116602483015260009182918416906387e320e490604401604080518083038186803b15801561356657600080fd5b505afa15801561357a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359e91906145bc565b604051636eb1769f60e11b81526001600160a01b038981166004830152306024830152929450909250829184169063dd62ed3e9060440160206040518083038186803b1580156135ed57600080fd5b505afa158015613601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136259190614858565b10156136735760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015260640161084b565b604080518881526020810183905261ffff86168183015290516001600160a01b038716918a917ffc30850f2040b53a580f146e0f19adff30f013111447180caa350a0a36f2422d9181900360600190a36136d86001600160a01b038316873084613140565b6136ec6001600160a01b03831684836131b1565b6040516327674bef60e21b81526001600160a01b038681166004830152602482018990526044820183905261ffff86166064830152841690639d9d2fbc90608401600060405180830381600087803b15801561374757600080fd5b505af115801561375b573d6000803e3d6000fd5b505050505050505050505050565b604080516101008101825260d1546001600160a01b039081168083528582166020840152610bb88385015290841660608301524260808301523460a08301819052600060c0840181905260e084018190528451630d0e30db60e41b81529451909463d0e30db092916004808301928892919082900301818588803b1580156137f057600080fd5b505af1158015613804573d6000803e3d6000fd5b505060d15461383693506001600160a01b0316915073e592427a0aece92de3edee1f18e0157c05861564905034613c34565b60405163414bf38960e01b815273e592427a0aece92de3edee1f18e0157c058615649063414bf3899061386d908490600401614ae8565b602060405180830381600087803b15801561388757600080fd5b505af115801561389b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bf9190614858565b949350505050565b6138cf613f5a565b604051806101000160405280838152602001604051806101c0016040528085815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000600681111561394257613942614386565b81526020016040518060200160405280600081525081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b03168152508152602001600067ffffffffffffffff8111156139b1576139b16145ea565b604051908082528060200260200182016040528015613a0357816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816139cf5790505b50815260006020820181905260408201819052606082018190526080820181905260a09091015292915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415613a70575060131936013560601c90565b503390565b600054610100900460ff16613ae05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6111dd613aeb612ede565b6130ee565b600054610100900460ff16613b5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161084b565b6001609755565b6000613bb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dd79092919063ffffffff16565b8051909150156131e15780806020019051810190613bd5919061458f565b6131e15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161084b565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691613c909190614b7b565b6000604051808303816000865af19150503d8060008114613ccd576040519150601f19603f3d011682016040523d82523d6000602084013e613cd2565b606091505b5091509150818015613cfc575080511580613cfc575080806020019051810190613cfc919061458f565b613d2d5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161084b565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051613d5e9190614b7b565b60006040518083038185875af1925050503d8060008114613d9b576040519150601f19603f3d011682016040523d82523d6000602084013e613da0565b606091505b50509050806131e15760405162461bcd60e51b815260206004820152600360248201526253544560e81b604482015260640161084b565b6060613de68484600085613df0565b90505b9392505050565b606082471015613e515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161084b565b6001600160a01b0385163b613ea85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161084b565b600080866001600160a01b03168587604051613ec49190614b7b565b60006040518083038185875af1925050503d8060008114613f01576040519150601f19603f3d011682016040523d82523d6000602084013e613f06565b606091505b5091509150613f16828286613f21565b979650505050505050565b60608315613f30575081613de9565b825115613f405782518084602001fd5b8160405162461bcd60e51b815260040161084b9190614b97565b60405180610100016040528060008152602001613f75613fb0565b81526020016060815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000151581525090565b604051806101c001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000600681111561401257614012614386565b8152602001606081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6000806040838503121561406a57600080fd5b50508035926020909101359150565b6001600160a01b0381168114612bde57600080fd5b600080604083850312156140a157600080fd5b82356140ac81614079565b946020939093013593505050565b6000602082840312156140cc57600080fd5b5035919050565b600080600080600060a086880312156140eb57600080fd5b85356140f681614079565b9450602086013561410681614079565b9350604086013561411681614079565b9250606086013561412681614079565b9150608086013561413681614079565b809150509295509295909350565b60006020828403121561415657600080fd5b8135613de981614079565b60008060006060848603121561417657600080fd5b8335925060208401359150604084013561418f81614079565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156141d2578351835292840192918401916001016141b6565b50909695505050505050565b600080604083850312156141f157600080fd5b82359150602083013561420381614079565b809150509250929050565b600081518084526020808501945080840160005b83811015614269578151805161ffff9081168952848201518116858a0152604080830151909116908901526060908101519088015260809096019590820190600101614222565b509495945050505050565b600060a08201878352602060a08185015281885180845260c086019150828a01935060005b818110156142c0578451805184528401518484015293830193604090920191600101614299565b505084810360408601526142d4818961420e565b606086019790975250505050608001529392505050565b60008060006060848603121561430057600080fd5b833561430b81614079565b9250602084013561431b81614079565b929592945050506040919091013590565b61ffff81168114612bde57600080fd5b6000806000806080858703121561435257600080fd5b84359350602085013561436481614079565b925060408501359150606085013561437b8161432c565b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b600781106143ba57634e487b7160e01b600052602160045260246000fd5b9052565b60005b838110156143d95781810151838201526020016143c1565b838111156131ab5750506000910152565b600081518084526144028160208601602086016143be565b601f01601f19169290920160200192915050565b6020815260006101208351602084015260208401516101008060408601528151838601526020820151610140614456818801836001600160a01b03169052565b6040840151610160888101919091526060850151610180808a019190915260808601516101a0808b019190915260a08701516101c0808c019190915260c08801516001600160a01b03166101e08c015260e088015195506144bb6102008c018761439c565b868801519550806102208c0152506144d76102e08b01866143ea565b978701516102408b0152928601516102608a01529085015160ff166102808901528401516001600160a01b039081166102a089015290840151166102c0870152506040860151858403601f1901606087015292614534818561420e565b9350506060860151915061455360808601836001600160a01b03169052565b608086015160a086015260a086015160c086015260c086015160e086015260e086015191506145858186018315159052565b5090949350505050565b6000602082840312156145a157600080fd5b81518015158114613de957600080fd5b805161300381614079565b600080604083850312156145cf57600080fd5b82516145da81614079565b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715614624576146246145ea565b60405290565b6040516080810167ffffffffffffffff81118282101715614624576146246145ea565b6040805190810167ffffffffffffffff81118282101715614624576146246145ea565b604051601f8201601f1916810167ffffffffffffffff81118282101715614699576146996145ea565b604052919050565b80516007811061300357600080fd5b600082601f8301126146c157600080fd5b815167ffffffffffffffff8111156146db576146db6145ea565b6146ee601f8201601f1916602001614670565b81815284602083860101111561470357600080fd5b6138bf8260208301602087016143be565b805160ff8116811461300357600080fd5b60006101c0828403121561473857600080fd5b614740614600565b905081518152614752602083016145b1565b602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261478b60c083016145b1565b60c082015261479c60e083016146a1565b60e08201526101008083015167ffffffffffffffff8111156147bd57600080fd5b6147c9858286016146b0565b8284015250506101208083015181830152506101408083015181830152506101606147f5818401614714565b908201526101806148078382016145b1565b908201526101a06148198382016145b1565b9082015292915050565b60006020828403121561483557600080fd5b815167ffffffffffffffff81111561484c57600080fd5b6138bf84828501614725565b60006020828403121561486a57600080fd5b5051919050565b600067ffffffffffffffff82111561488b5761488b6145ea565b5060051b60200190565b600082601f8301126148a657600080fd5b815160206148bb6148b683614871565b614670565b82815260079290921b840181019181810190868411156148da57600080fd5b8286015b8481101561494857608081890312156148f75760008081fd5b6148ff61462a565b815161490a8161432c565b8152818501516149198161432c565b8186015260408281015161492c8161432c565b90820152606082810151908201528352918301916080016148de565b509695505050505050565b600080600080600060a0868803121561496b57600080fd5b8551945060208087015167ffffffffffffffff8082111561498b57600080fd5b818901915089601f83011261499f57600080fd5b81516149ad6148b682614871565b81815260069190911b8301840190848101908c8311156149cc57600080fd5b938501935b82851015614a0f576040858e0312156149ea5760008081fd5b6149f261464d565b8551815286860151878201528252604090940193908501906149d1565b60408c01519099509450505080831115614a2857600080fd5b5050614a3688828901614895565b606088015160809098015196999598509695949350505050565b60008060408385031215614a6357600080fd5b505080516020909101519092909150565b60008060008060808587031215614a8a57600080fd5b845167ffffffffffffffff80821115614aa257600080fd5b614aae88838901614725565b95506020870151915080821115614ac457600080fd5b50614ad187828801614895565b604087015160609097015195989097509350505050565b6101008101612c0582846001600160a01b0380825116835280602083015116602084015262ffffff60408301511660408401528060608301511660608401526080820151608084015260a082015160a084015260c082015160c08401528060e08301511660e0840152505050565b600082821015614b7657634e487b7160e01b600052601160045260246000fd5b500390565b60008251614b8d8184602087016143be565b9190910192915050565b602081526000613de960208301846143ea56fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c0050726f64756374696f6e20646f6573206e6f74206578697374000000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122022415fab53596bae07a86a8cac2bf8c986c8e4d1b9ada751336c993f447bd78364736f6c63430008090033",
  "devdoc": {
    "custom:security-contact": "info@staxe.io",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 800,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 803,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3114,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 792,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1060,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 1104,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14830,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "tokenIds",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)3121_storage"
      },
      {
        "astId": 14834,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "trustedEscrowFactories",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14838,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "trustedErc20Coins",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14849,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "productionEscrows",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_struct(Escrow)16828_storage)"
      },
      {
        "astId": 14854,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "productionIdsByOwner",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 14857,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "productionToken",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IProductionTokenV3)16771"
      },
      {
        "astId": 14860,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "members",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IMembersV3)16433"
      },
      {
        "astId": 14862,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "treasury",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 14865,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "nativeWrapper",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IWETH)17094"
      },
      {
        "astId": 14867,
        "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
        "label": "relayer",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMembersV3)16433": {
        "encoding": "inplace",
        "label": "contract IMembersV3",
        "numberOfBytes": "20"
      },
      "t_contract(IProductionEscrowV3)16725": {
        "encoding": "inplace",
        "label": "contract IProductionEscrowV3",
        "numberOfBytes": "20"
      },
      "t_contract(IProductionTokenV3)16771": {
        "encoding": "inplace",
        "label": "contract IProductionTokenV3",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)17094": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Escrow)16828_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IProductionsV3.Escrow)",
        "numberOfBytes": "32",
        "value": "t_struct(Escrow)16828_storage"
      },
      "t_struct(Counter)3121_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3120,
            "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Escrow)16828_storage": {
        "encoding": "inplace",
        "label": "struct IProductionsV3.Escrow",
        "members": [
          {
            "astId": 16824,
            "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16827,
            "contract": "contracts/v3/StaxeProductionsV3.sol:StaxeProductionsV3",
            "label": "escrow",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IProductionEscrowV3)16725"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}