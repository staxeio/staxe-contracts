{
  "address": "0x1fA9B3dB43e99B94e3737D57583d8cc5e18bF8AA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProductionsV3",
          "name": "_productions",
          "type": "address"
        },
        {
          "internalType": "contract IMembersV3",
          "name": "_members",
          "type": "address"
        },
        {
          "internalType": "contract IPriceCalculationEngineV3",
          "name": "_priceCalculationEngine",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        }
      ],
      "name": "ProductionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organizerTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxTokensUnknownBuyer",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "total",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "minTokensRequired",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StaxeProductionsFactoryV3.CreatePerk[]",
              "name": "perks",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "dataHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "crowdsaleEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productionEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "platformSharePercentage",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "perkTracker",
              "type": "address"
            }
          ],
          "internalType": "struct StaxeProductionsFactoryV3.CreateProduction",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "createProduction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9eabced6adb6c0c55b47e32b33d42bea3b08edbf6d52e9230b60423c9291db59",
  "receipt": {
    "to": null,
    "from": "0xef5c870723Af027274a09610546ffC55D6eB117f",
    "contractAddress": "0x1fA9B3dB43e99B94e3737D57583d8cc5e18bF8AA",
    "transactionIndex": 19,
    "gasUsed": "4878210",
    "logsBloom": "0x
    "blockHash": "0x9ea4f8affbc2ad5a19750e27c8cd6b1b7e1b7adcef601386f2e6015021357d5b",
    "transactionHash": "0x9eabced6adb6c0c55b47e32b33d42bea3b08edbf6d52e9230b60423c9291db59",
    "logs": [],
    "blockNumber": 7540157,
    "cumulativeGasUsed": "9127820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaDA35A6F6D174423433e552B8b4cdC4EB14D1025",
    "0x7A4b2aD8A6f8685975De3290ad3c60B924335E09",
    "0x06a3A873Bd1474fb41b54db9DC6ca63237D8A784"
  ],
  "numDeployments": 1,
  "solcInputHash": "82ba7a8da921e374b1f01f60297d1d1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProductionsV3\",\"name\":\"_productions\",\"type\":\"address\"},{\"internalType\":\"contract IMembersV3\",\"name\":\"_members\",\"type\":\"address\"},{\"internalType\":\"contract IPriceCalculationEngineV3\",\"name\":\"_priceCalculationEngine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"ProductionCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organizerTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensUnknownBuyer\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"minTokensRequired\",\"type\":\"uint256\"}],\"internalType\":\"struct StaxeProductionsFactoryV3.CreatePerk[]\",\"name\":\"perks\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"dataHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"crowdsaleEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"platformSharePercentage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"perkTracker\",\"type\":\"address\"}],\"internalType\":\"struct StaxeProductionsFactoryV3.CreateProduction\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"createProduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/StaxeProductionsFactoryV3.sol\":\"StaxeProductionsFactoryV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/v3/StaxeProductionEscrowV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/IMembersV3.sol\\\";\\nimport \\\"./interfaces/IProductionEscrowV3.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract StaxeProductionEscrowV3 is Ownable, IProductionEscrowV3, IERC1155Receiver, Pausable {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  // --- Data ---\\n\\n  ProductionData public productionData;\\n  uint256 public immutable tokenPrice;\\n  IMembersV3 public immutable members;\\n\\n  Perk[] public perks;\\n  mapping(address => uint16[]) public perksByOwner;\\n  mapping(address => EnumerableSet.UintSet) private perkSetByOwner;\\n\\n  IERC1155Upgradeable private tokenContract;\\n\\n  uint256 public fundsRaised;\\n  uint256 public proceedsEarned;\\n  mapping(address => uint256) payoutPerTokenHolder;\\n  mapping(address => uint256) private payoutPerTokenTracking;\\n\\n  bool public refundable;\\n\\n  // --- Functions ---\\n\\n  constructor(\\n    ProductionData memory _productionData,\\n    Perk[] memory _perks,\\n    uint256 _tokenPrice,\\n    IMembersV3 _members\\n  ) Ownable() {\\n    productionData = _productionData;\\n    for (uint16 i = 0; i < _perks.length; i++) {\\n      perks.push(_perks[i]);\\n    }\\n    tokenPrice = _tokenPrice;\\n    members = _members;\\n  }\\n\\n  modifier hasState(ProductionState state) {\\n    require(productionData.state == state, \\\"Not in required state\\\");\\n    _;\\n  }\\n\\n  modifier creatorOnly(address caller) {\\n    require(\\n      isCreatorOrDelegate(caller) || (refundable && members.isApprover(caller)),\\n      \\\"Can only be called from creator or delegate\\\"\\n    );\\n    _;\\n  }\\n\\n  // --- IProductionEscrowV3 functions ---\\n\\n  function getProductionData() external view override returns (ProductionData memory) {\\n    return productionData;\\n  }\\n\\n  function getProductionDataWithPerks()\\n    external\\n    view\\n    override\\n    returns (\\n      ProductionData memory,\\n      Perk[] memory,\\n      uint256\\n    )\\n  {\\n    return (productionData, perks, fundsRaised);\\n  }\\n\\n  function getTokensAvailable() external view hasState(ProductionState.OPEN) returns (uint256) {\\n    return productionData.totalSupply - productionData.soldCounter;\\n  }\\n\\n  function getTokenPrice(uint256 amount, address buyer) external view override returns (IERC20Upgradeable, uint256) {\\n    return productionData.priceCalculationEngine.calculateTokenPrice(this, productionData, tokenPrice, amount, buyer);\\n  }\\n\\n  function getTokenOwnerData(address tokenOwner)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 balance,\\n      Perk[] memory perksOwned,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    )\\n  {\\n    balance = tokenContract.balanceOf(tokenOwner, productionData.id);\\n    uint16[] memory ids = perksByOwner[tokenOwner];\\n    uint256[] memory values = EnumerableSet.values(perkSetByOwner[tokenOwner]);\\n    perksOwned = new Perk[](values.length);\\n    for (uint16 i = 0; i < values.length; i++) {\\n      uint16 id = uint16(values[i]);\\n      Perk memory perk = perks[id - 1];\\n      uint16 count = countIds(id, ids);\\n      perksOwned[i] = Perk({id: id, total: perk.total, claimed: count, minTokensRequired: perk.minTokensRequired});\\n    }\\n    proceedsClaimed = payoutPerTokenHolder[tokenOwner];\\n    proceedsAvailable = productionData.soldCounter > 0\\n      ? ((balance * proceedsEarned) / productionData.soldCounter) - payoutPerTokenTracking[tokenOwner]\\n      : 0;\\n    return (balance, perksOwned, proceedsClaimed, proceedsAvailable);\\n  }\\n\\n  // ---------------------------------------------------------------------------------------------\\n  // Lifecycle\\n  // ---------------------------------------------------------------------------------------------\\n\\n  function approve(address approver) external override hasState(ProductionState.CREATED) onlyOwner {\\n    require(members.isApprover(approver));\\n    emit StateChanged(ProductionState.CREATED, ProductionState.OPEN, approver);\\n    productionData.state = ProductionState.OPEN;\\n  }\\n\\n  function decline(address decliner) external override hasState(ProductionState.CREATED) onlyOwner {\\n    require(members.isApprover(decliner));\\n    emit StateChanged(ProductionState.CREATED, ProductionState.DECLINED, decliner);\\n    productionData.state = ProductionState.DECLINED;\\n  }\\n\\n  function finish(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external override hasState(ProductionState.OPEN) onlyOwner whenNotPaused {\\n    // if we have an end timestamp we can allow closing anyone (e.g. our relay with an autotask)\\n    // otherwise if no timestamp we hand this over to the production owner.\\n    require(\\n      (productionData.crowdsaleEndDate == 0 && isCreatorOrDelegate(caller)) ||\\n        (productionData.crowdsaleEndDate > 0 &&\\n          productionData.crowdsaleEndDate <= block.timestamp &&\\n          (isCreatorOrDelegate(caller) || isTrustedForwarder)),\\n      \\\"Cannot be finished before finish date or only by creator\\\"\\n    );\\n    emit StateChanged(ProductionState.OPEN, ProductionState.FINISHED, caller);\\n    productionData.state = ProductionState.FINISHED;\\n    swipeToCreator(caller, platformTreasury);\\n  }\\n\\n  function close(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external override hasState(ProductionState.FINISHED) onlyOwner {\\n    // if we have an end timestamp we can allow closing anyone (e.g. our relay with an autotask)\\n    // otherwise if no timestamp we hand this over to the production owner.\\n    require(\\n      (productionData.productionEndDate == 0 && isCreatorOrDelegate(caller)) ||\\n        (productionData.productionEndDate > 0 &&\\n          productionData.productionEndDate <= block.timestamp &&\\n          (isCreatorOrDelegate(caller) || isTrustedForwarder)),\\n      \\\"Cannot be closed before close date or only by creator\\\"\\n    );\\n    emit StateChanged(ProductionState.FINISHED, ProductionState.CLOSED, caller);\\n    productionData.state = ProductionState.CLOSED;\\n    swipeToCreator(caller, platformTreasury);\\n  }\\n\\n  function pause(address caller) external onlyOwner hasState(ProductionState.OPEN) whenNotPaused {\\n    require(members.isApprover(caller), \\\"Caller must be approver\\\");\\n    _pause();\\n  }\\n\\n  function unpause(address caller) external onlyOwner hasState(ProductionState.OPEN) whenPaused {\\n    require(members.isApprover(caller), \\\"Caller must be approver\\\");\\n    _unpause();\\n  }\\n\\n  function paused() public view override(Pausable, IProductionEscrowV3) onlyOwner returns (bool) {\\n    return Pausable.paused();\\n  }\\n\\n  function cancel(address caller, uint256 newCloseDate) external onlyOwner hasState(ProductionState.OPEN) whenPaused {\\n    require(members.isApprover(caller), \\\"Caller must be approver\\\");\\n    require(newCloseDate >= block.timestamp + 30 days, \\\"Refund period not long enough\\\");\\n    emit StateChanged(ProductionState.OPEN, ProductionState.FINISHED, caller);\\n    productionData.state = ProductionState.FINISHED;\\n    productionData.productionEndDate = newCloseDate;\\n    refundable = true;\\n    IERC20Upgradeable currency = IERC20Upgradeable(productionData.currency);\\n    uint256 balance = currency.balanceOf(address(this));\\n    proceedsEarned += balance;\\n    _unpause();\\n  }\\n\\n  // ---------------------------------------------------------------------------------------------\\n  // Tokens, funds and proceeds\\n  // ---------------------------------------------------------------------------------------------\\n\\n  function buyTokens(\\n    address buyer,\\n    uint256 amount,\\n    uint256 price,\\n    uint16 perkId\\n  ) external override hasState(ProductionState.OPEN) whenNotPaused onlyOwner {\\n    require(amount <= productionData.totalSupply - productionData.soldCounter, \\\"Not enough tokens available\\\");\\n    require(\\n      members.isInvestor(buyer) || amount <= productionData.maxTokensUnknownBuyer,\\n      \\\"Needs investor role to buy amount of tokens\\\"\\n    );\\n    claimPerk(buyer, amount, perkId);\\n    fundsRaised += price;\\n    emit TokenBought(buyer, amount, price, perkId);\\n    productionData.soldCounter += amount;\\n    tokenContract.safeTransferFrom(address(this), buyer, productionData.id, amount, \\\"\\\");\\n  }\\n\\n  function depositProceeds(address caller, uint256 amount)\\n    external\\n    override\\n    hasState(ProductionState.FINISHED)\\n    creatorOnly(caller)\\n    onlyOwner\\n  {\\n    emit ProceedsDeposited(amount, caller);\\n    proceedsEarned += amount;\\n  }\\n\\n  function transferProceeds(address holder)\\n    external\\n    override\\n    hasState(ProductionState.FINISHED)\\n    onlyOwner\\n    returns (uint256 payout)\\n  {\\n    require(members.isInvestor(holder), \\\"Only investors can claim proceeds\\\");\\n    uint256 tokens = tokenContract.balanceOf(holder, productionData.id);\\n    payout = ((tokens * proceedsEarned) / productionData.soldCounter) - payoutPerTokenTracking[holder];\\n    payoutPerTokenHolder[holder] += payout;\\n    payoutPerTokenTracking[holder] += payout;\\n    if (payout > 0) {\\n      emit ProceedsClaimed(payout, holder);\\n      IERC20Upgradeable token = IERC20Upgradeable(productionData.currency);\\n      token.safeTransfer(holder, payout);\\n    }\\n  }\\n\\n  function transferFunding(address caller, address platformTreasury)\\n    external\\n    override\\n    hasState(ProductionState.OPEN)\\n    creatorOnly(caller)\\n    onlyOwner\\n    whenNotPaused\\n    returns (uint256 amount, uint256 platformShare)\\n  {\\n    (amount, platformShare) = swipeToCreator(caller, platformTreasury);\\n  }\\n\\n  // ---------------------------------------------------------------------------------------------\\n  // Callbacks\\n  // ---------------------------------------------------------------------------------------------\\n\\n  function onTokenTransfer(\\n    IERC1155Upgradeable, /* tokenContract */\\n    uint256 tokenId,\\n    address currentOwner,\\n    address newOwner,\\n    uint256 numTokens\\n  ) external override {\\n    require(msg.sender == address(tokenContract), \\\"Unknown token contract sender\\\");\\n    require(tokenId == productionData.id, \\\"Invalid token id\\\");\\n    require(numTokens > 0, \\\"Tokens to transfer must be > 0\\\");\\n    uint256 currentBalance = tokenContract.balanceOf(currentOwner, productionData.id);\\n    require(currentBalance >= numTokens, \\\"Insufficient balance for transfer\\\");\\n    uint256 payoutTransfer = (numTokens * payoutPerTokenTracking[currentOwner]) / currentBalance;\\n    payoutPerTokenTracking[currentOwner] -= payoutTransfer;\\n    payoutPerTokenTracking[newOwner] += payoutTransfer;\\n  }\\n\\n  function onERC1155Received(\\n    address, /*operator*/\\n    address, /*from*/\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata /*data*/\\n  ) external virtual override hasState(ProductionState.CREATED) returns (bytes4) {\\n    require(productionData.id == 0, \\\"Token already set\\\");\\n    require(productionData.totalSupply == amount, \\\"Wrong amount minted\\\");\\n    productionData.id = tokenId;\\n    tokenContract = IERC1155Upgradeable(msg.sender);\\n    if (productionData.organizerTokens > 0) {\\n      tokenContract.safeTransferFrom(\\n        address(this),\\n        productionData.creator,\\n        tokenId,\\n        productionData.organizerTokens,\\n        bytes(\\\"\\\")\\n      );\\n      productionData.soldCounter += productionData.organizerTokens;\\n    }\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  function onERC1155BatchReceived(\\n    address, /*operator*/\\n    address, /*from*/\\n    uint256[] calldata, /*tokenIds*/\\n    uint256[] calldata, /*values*/\\n    bytes calldata /*data*/\\n  ) external virtual override returns (bytes4) {\\n    return 0x00; // unsupported\\n  }\\n\\n  // ERC165 - needed from ERC1155Receiver\\n  function supportsInterface(bytes4 interfaceID) external view virtual override returns (bool) {\\n    return\\n      interfaceID == 0x01ffc9a7 || // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\\n      interfaceID == 0x4e2312e0; // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) ^ bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\n  }\\n\\n  // ---------------------------------------------------------------------------------------------\\n  // private\\n  // ---------------------------------------------------------------------------------------------\\n\\n  function swipeToCreator(address caller, address platformTreasury)\\n    private\\n    returns (uint256 balanceLeft, uint256 platformShare)\\n  {\\n    IERC20Upgradeable currency = IERC20Upgradeable(productionData.currency);\\n    uint256 balance = currency.balanceOf(address(this));\\n    platformShare = (balance * productionData.platformSharePercentage) / 100;\\n    balanceLeft = balance - platformShare;\\n    emit FundingClaimed(balanceLeft, platformShare, caller);\\n    currency.safeTransfer(productionData.creator, balanceLeft);\\n    currency.safeTransfer(platformTreasury, platformShare);\\n  }\\n\\n  function isCreatorOrDelegate(address caller) private view returns (bool) {\\n    return productionData.creator == caller || members.isOrganizerDelegate(caller, productionData.creator);\\n  }\\n\\n  function claimPerk(\\n    address buyer,\\n    uint256 tokensBought,\\n    uint16 perkId\\n  ) internal {\\n    if (perkId == 0) {\\n      return;\\n    }\\n    require(perkId <= perks.length, \\\"Invalid perkId\\\");\\n    Perk storage perk = perks[perkId - 1];\\n    require(perk.total > perk.claimed, \\\"Perk not available\\\");\\n    require(perk.minTokensRequired <= tokensBought, \\\"Not enough tokens to claim\\\");\\n    perk.claimed += 1;\\n    perksByOwner[buyer].push(perkId);\\n    EnumerableSet.add(perkSetByOwner[buyer], perkId);\\n    if (address(productionData.perkTracker) != address(0)) {\\n      productionData.perkTracker.perkClaimed(buyer, productionData.id, perkId, tokensBought);\\n    }\\n  }\\n\\n  function countIds(uint16 perkId, uint16[] memory perkIds) private pure returns (uint16 result) {\\n    for (uint16 i = 0; i < perkIds.length; i++) {\\n      if (perkIds[i] == perkId) {\\n        result += 1;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x48640ba9ac6eb32763c77619eab3c0595810b2bed883bd50ad3e1c8759525d56\",\"license\":\"MIT\"},\"contracts/v3/StaxeProductionsFactoryV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IMembersV3.sol\\\";\\nimport \\\"./interfaces/IPerkTrackerV3.sol\\\";\\nimport \\\"./interfaces/IPriceCalculationEngineV3.sol\\\";\\nimport \\\"./interfaces/IProductionsV3.sol\\\";\\nimport \\\"./interfaces/IProductionEscrowV3.sol\\\";\\nimport \\\"./StaxeProductionEscrowV3.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract StaxeProductionsFactoryV3 {\\n  // ----- Structs -----\\n  struct CreatePerk {\\n    uint16 total;\\n    uint256 minTokensRequired;\\n  }\\n\\n  struct CreateProduction {\\n    uint256 totalSupply;\\n    uint256 organizerTokens;\\n    uint256 tokenPrice;\\n    address currency;\\n    uint256 maxTokensUnknownBuyer;\\n    CreatePerk[] perks;\\n    string dataHash;\\n    uint256 crowdsaleEndDate;\\n    uint256 productionEndDate;\\n    uint8 platformSharePercentage;\\n    address perkTracker;\\n  }\\n\\n  // ----- Events -----\\n  event ProductionCreated(uint256 indexed id, address indexed creator, uint256 tokenSupply, address escrow);\\n\\n  // ----- State -----\\n  IProductionsV3 private productions;\\n  IMembersV3 private members;\\n  IPriceCalculationEngineV3 private priceCalculationEngine;\\n\\n  constructor(\\n    IProductionsV3 _productions,\\n    IMembersV3 _members,\\n    IPriceCalculationEngineV3 _priceCalculationEngine\\n  ) {\\n    productions = _productions;\\n    members = _members;\\n    priceCalculationEngine = _priceCalculationEngine;\\n  }\\n\\n  // ----- Functions -----\\n  function createProduction(CreateProduction calldata data) external {\\n    require(members.isOrganizer(msg.sender), \\\"Not an organizer\\\");\\n    IProductionEscrowV3.Perk[] memory perks = new IProductionEscrowV3.Perk[](data.perks.length);\\n    for (uint16 i = 0; i < perks.length; i++) {\\n      CreatePerk memory perk = data.perks[i];\\n      perks[i] = IProductionEscrowV3.Perk({\\n        id: i + 1,\\n        total: perk.total,\\n        claimed: 0,\\n        minTokensRequired: perk.minTokensRequired\\n      });\\n    }\\n    IProductionEscrowV3.ProductionData memory productionData = IProductionEscrowV3.ProductionData({\\n      id: 0,\\n      creator: msg.sender,\\n      totalSupply: data.totalSupply,\\n      organizerTokens: data.organizerTokens,\\n      maxTokensUnknownBuyer: data.maxTokensUnknownBuyer,\\n      soldCounter: 0,\\n      currency: IERC20Upgradeable(data.currency),\\n      state: IProductionEscrowV3.ProductionState.CREATED,\\n      dataHash: data.dataHash,\\n      crowdsaleEndDate: data.crowdsaleEndDate,\\n      productionEndDate: data.productionEndDate,\\n      platformSharePercentage: data.platformSharePercentage,\\n      perkTracker: IPerkTrackerV3(data.perkTracker),\\n      priceCalculationEngine: IPriceCalculationEngineV3(priceCalculationEngine)\\n    });\\n    StaxeProductionEscrowV3 escrow = new StaxeProductionEscrowV3(productionData, perks, data.tokenPrice, members);\\n    escrow.transferOwnership(address(productions));\\n    if (data.perkTracker != address(0)) {\\n      productionData.perkTracker.registerEscrow(escrow);\\n    }\\n    uint256 id = productions.mintProduction(escrow, msg.sender, data.totalSupply);\\n    emit ProductionCreated(id, msg.sender, data.totalSupply, address(escrow));\\n  }\\n}\\n\",\"keccak256\":\"0xd681f9dd961ade45ea17f44363c6d697cde062898c9c74d4afff537aa0bdc717\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IMembersV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMembersV3 {\\n  function isOrganizer(address sender) external view returns (bool);\\n\\n  function isApprover(address sender) external view returns (bool);\\n\\n  function isInvestor(address sender) external view returns (bool);\\n\\n  function isOrganizerDelegate(address sender, address organizer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe13717c87ca09f5798dae839d18d942720bac302d04f7c6f27306fde8afd2aee\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPerkTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPerkTrackerV3 {\\n  function perkClaimed(\\n    address claimer,\\n    uint256 productionId,\\n    uint16 perkId,\\n    uint256 tokensBought\\n  ) external;\\n\\n  function registerEscrow(IProductionEscrowV3 escrow) external;\\n}\\n\",\"keccak256\":\"0x24cceb2ba26d52649efe8a6043402dbc9c452c5d63ba2e34df2bd1d8280d76ef\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IPriceCalculationEngineV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IPriceCalculationEngineV3 {\\n  function calculateTokenPrice(\\n    IProductionEscrowV3 escrow,\\n    IProductionEscrowV3.ProductionData calldata production,\\n    uint256 tokenBasePrice,\\n    uint256 amount,\\n    address buyer\\n  ) external view returns (IERC20Upgradeable currency, uint256 price);\\n}\\n\",\"keccak256\":\"0xc82f1e05afad1b7d746f4ffdb64d985136cfca847de0a8aa18e10e0a4f240713\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionEscrowV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IProductionTokenTrackerV3.sol\\\";\\nimport \\\"./IPriceCalculationEngineV3.sol\\\";\\nimport \\\"./IPerkTrackerV3.sol\\\";\\n\\ninterface IProductionEscrowV3 is IProductionTokenTrackerV3 {\\n  enum ProductionState {\\n    EMPTY,\\n    CREATED,\\n    OPEN,\\n    FINISHED,\\n    DECLINED,\\n    CANCELED,\\n    CLOSED\\n  }\\n\\n  struct Perk {\\n    uint16 id;\\n    uint16 total;\\n    uint16 claimed;\\n    uint256 minTokensRequired;\\n  }\\n\\n  struct ProductionData {\\n    uint256 id;\\n    address creator;\\n    uint256 totalSupply;\\n    uint256 organizerTokens;\\n    uint256 soldCounter;\\n    uint256 maxTokensUnknownBuyer;\\n    IERC20Upgradeable currency;\\n    ProductionState state;\\n    string dataHash;\\n    uint256 crowdsaleEndDate;\\n    uint256 productionEndDate;\\n    uint8 platformSharePercentage;\\n    IPerkTrackerV3 perkTracker;\\n    IPriceCalculationEngineV3 priceCalculationEngine;\\n  }\\n\\n  // --- Events ---\\n\\n  event StateChanged(ProductionState from, ProductionState to, address by);\\n  event TokenBought(address buyer, uint256 amount, uint256 price, uint16 perkClaimed);\\n  event FundingClaimed(uint256 amount, uint256 platformShare, address by);\\n  event ProceedsDeposited(uint256 amount, address by);\\n  event ProceedsClaimed(uint256 amount, address by);\\n\\n  // --- Functions ---\\n\\n  function getProductionData() external view returns (ProductionData memory);\\n\\n  function getProductionDataWithPerks()\\n    external\\n    view\\n    returns (\\n      ProductionData memory,\\n      Perk[] memory,\\n      uint256\\n    );\\n\\n  function getTokenOwnerData(address tokenOwner)\\n    external\\n    view\\n    returns (\\n      uint256 balance,\\n      Perk[] memory perks,\\n      uint256 proceedsClaimed,\\n      uint256 proceedsAvailable\\n    );\\n\\n  function getTokensAvailable() external view returns (uint256);\\n\\n  function getTokenPrice(uint256 amount, address buyer) external view returns (IERC20Upgradeable, uint256);\\n\\n  function approve(address approver) external;\\n\\n  function decline(address decliner) external;\\n\\n  function finish(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function close(\\n    address caller,\\n    bool isTrustedForwarder,\\n    address platformTreasury\\n  ) external;\\n\\n  function pause(address caller) external;\\n\\n  function unpause(address caller) external;\\n\\n  function paused() external view returns (bool);\\n\\n  function cancel(address caller, uint256 newCloseDate) external;\\n\\n  function buyTokens(\\n    address buyer,\\n    uint256 amount,\\n    uint256 price,\\n    uint16 perk\\n  ) external;\\n\\n  function depositProceeds(address caller, uint256 amount) external;\\n\\n  function transferProceeds(address tokenHolder) external returns (uint256 amount);\\n\\n  function transferFunding(address caller, address platformTreasury)\\n    external\\n    returns (uint256 amount, uint256 platformShare);\\n}\\n\",\"keccak256\":\"0xca6ebbc4ed22a9d9eac41a1d4b9ba248ee139e69f161aec584aa1632f153ae55\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionTokenTrackerV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IProductionTokenTrackerV3 {\\n  function onTokenTransfer(\\n    IERC1155Upgradeable tokenContract,\\n    uint256 tokenId,\\n    address currentOwner,\\n    address newOwner,\\n    uint256 numTokens\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdb0557d9b0679807c9b2d0c5fdad772686cad7f0212610b64d1242970286a730\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IProductionsV3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IProductionEscrowV3.sol\\\";\\n\\ninterface IProductionsV3 {\\n  event ProductionMinted(uint256 indexed id, address indexed creator, uint256 tokenSupply, address escrow);\\n  event TokenBought(uint256 indexed id, address indexed buyer, uint256 amount, uint256 price, uint16 perkClaimed);\\n  event FundingClaimed(uint256 indexed id, address indexed buyer, uint256 amount, uint256 platformShare);\\n  event ProceedsDeposited(uint256 indexed id, address indexed creator, uint256 amount);\\n  event ProceedsClaimed(uint256 indexed id, address indexed buyer, uint256 amount);\\n\\n  struct Escrow {\\n    uint256 id;\\n    IProductionEscrowV3 escrow;\\n  }\\n\\n  struct Production {\\n    uint256 id;\\n    IProductionEscrowV3.ProductionData data;\\n    IProductionEscrowV3.Perk[] perks;\\n    IProductionEscrowV3 escrow;\\n    uint256 fundsRaised;\\n    uint256 escrowBalance;\\n    bool paused;\\n  }\\n\\n  function mintProduction(\\n    IProductionEscrowV3 escrow,\\n    address creator,\\n    uint256 totalAmount\\n  ) external returns (uint256 id);\\n\\n  function getTokenPrice(uint256 id, uint256 amount) external view returns (IERC20Upgradeable, uint256);\\n\\n  function getTokenPriceFor(\\n    uint256 id,\\n    uint256 amount,\\n    address buyer\\n  ) external view returns (IERC20Upgradeable, uint256);\\n\\n  function approve(uint256 id) external;\\n\\n  function decline(uint256 id) external;\\n\\n  function finishCrowdsale(uint256 id) external;\\n\\n  function close(uint256 id) external;\\n\\n  function pause(uint256 id) external;\\n\\n  function unpause(uint256 id) external;\\n\\n  function cancel(uint256 id, uint256 newCloseDate) external;\\n\\n  function buyTokensWithCurrency(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external payable;\\n\\n  function buyTokensWithTokens(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external;\\n\\n  function buyTokensWithFiat(\\n    uint256 id,\\n    address buyer,\\n    uint256 amount,\\n    uint16 perk\\n  ) external;\\n\\n  function depositProceedsInTokens(uint256 id, uint256 amount) external;\\n\\n  function depositProceedsInCurrency(uint256 id) external payable;\\n\\n  function transferProceeds(uint256 id) external;\\n\\n  function transferFunding(uint256 id) external;\\n}\\n\",\"keccak256\":\"0x365777844cb069044157dfa5654614fc33f7e1b3bbfcd700d3a5659690b5149a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161570d38038061570d83398101604081905261002f91610089565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d6565b6001600160a01b038116811461008657600080fd5b50565b60008060006060848603121561009e57600080fd5b83516100a981610071565b60208501519093506100ba81610071565b60408501519092506100cb81610071565b809150509250925092565b615628806100e56000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063ac3bb44a1462000033575b600080fd5b6200004a62000044366004620005be565b6200004c565b005b6001546040516341676f1560e01b81523360048201526001600160a01b03909116906341676f159060240160206040518083038186803b1580156200009057600080fd5b505afa158015620000a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cb919062000604565b6200011c5760405162461bcd60e51b815260206004820152601060248201527f4e6f7420616e206f7267616e697a657200000000000000000000000000000000604482015260640160405180910390fd5b60006200012d60a083018362000628565b905067ffffffffffffffff8111156200014a576200014a6200067c565b6040519080825280602002602001820160405280156200019e57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181620001695790505b50905060005b81518161ffff16101562000273576000620001c360a085018562000628565b8361ffff16818110620001da57620001da62000692565b905060400201803603810190620001f29190620006a8565b905060405180608001604052808360016200020e91906200072e565b61ffff168152602001826000015161ffff168152602001600061ffff1681526020018260200151815250838361ffff168151811062000251576200025162000692565b60200260200101819052505080806200026a9062000757565b915050620001a4565b506000604051806101c0016040528060008152602001336001600160a01b0316815260200184600001358152602001846020013581526020016000815260200184608001358152602001846060016020810190620002d291906200077c565b6001600160a01b0316815260200160018152602001620002f660c0860186620007a7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060e0850135602082015261010085013560408201526060016200035961014086016101208701620007f1565b60ff16815260200162000375610160860161014087016200077c565b6001600160a01b0390811682526002548116602090920191909152600154604080519394506000938593879392890135921690620003b390620005b0565b620003c29493929190620008f1565b604051809103906000f080158015620003df573d6000803e3d6000fd5b5060005460405163f2fde38b60e01b81526001600160a01b03918216600482015291925082169063f2fde38b90602401600060405180830381600087803b1580156200042a57600080fd5b505af11580156200043f573d6000803e3d6000fd5b50600092506200045b915050610160860161014087016200077c565b6001600160a01b031614620004cf576101808201516040516339d3ad7760e01b81526001600160a01b038381166004830152909116906339d3ad7790602401600060405180830381600087803b158015620004b557600080fd5b505af1158015620004ca573d6000803e3d6000fd5b505050505b60008054604051634982bdd360e11b81526001600160a01b03848116600483015233602483015287356044830152909116906393057ba690606401602060405180830381600087803b1580156200052557600080fd5b505af11580156200053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000560919062000a3e565b60408051873581526001600160a01b0385166020820152919250339183917f3456760ea9dedbb2f1547f379062707350387eb715c468c5b3f4ca6f5d041d73910160405180910390a35050505050565b614b9a8062000a5983390190565b600060208284031215620005d157600080fd5b813567ffffffffffffffff811115620005e957600080fd5b82016101608185031215620005fd57600080fd5b9392505050565b6000602082840312156200061757600080fd5b81518015158114620005fd57600080fd5b6000808335601e198436030181126200064057600080fd5b83018035915067ffffffffffffffff8211156200065c57600080fd5b6020019150600681901b36038213156200067557600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060408284031215620006bb57600080fd5b6040516040810181811067ffffffffffffffff82111715620006ed57634e487b7160e01b600052604160045260246000fd5b604052823561ffff811681146200070357600080fd5b81526020928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168185168083038211156200074e576200074e62000718565b01949350505050565b600061ffff8083168181141562000772576200077262000718565b6001019392505050565b6000602082840312156200078f57600080fd5b81356001600160a01b0381168114620005fd57600080fd5b6000808335601e19843603018112620007bf57600080fd5b83018035915067ffffffffffffffff821115620007db57600080fd5b6020019150368190038213156200067557600080fd5b6000602082840312156200080457600080fd5b813560ff81168114620005fd57600080fd5b600781106200083557634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015620008615760208185018101518683018201520162000843565b8181111562000874576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015620008e6578151805161ffff9081168952848201518116858a01526040808301519091169089015260609081015190880152608090960195908201906001016200089d565b509495945050505050565b6080815284516080820152600060208601516200091960a08401826001600160a01b03169052565b50604086015160c0830152606086015160e08301526080860151610100818185015260a08801519150610120828186015260c0890151925061014062000969818701856001600160a01b03169052565b60e08a01519350610160620009818188018662000816565b838b015194506101c093506101808481890152620009a461024089018762000839565b9550838c015193506101a084818a0152838d0151868a0152828d01519550620009d36101e08a018760ff169052565b908c01516001600160a01b039081166102008a0152908c0151908116610220890152935062000a0192505050565b50828103602084015262000a16818762000889565b91505083604083015262000a3560608301846001600160a01b03169052565b95945050505050565b60006020828403121562000a5157600080fd5b505191905056fe60c06040523480156200001157600080fd5b5060405162004b9a38038062004b9a83398101604081905262000034916200058f565b6200003f336200023a565b6000805460ff60a01b19169055835160019081556020850151600280546001600160a01b039283166001600160a01b03199182161790915560408701516003556060870151600455608087015160055560a0870151600690815560c088015160078054919094169281168317845560e0890151899594909390926001600160a81b03199092161790600160a01b908490811115620000e157620000e16200070a565b02179055506101008201518051620001049160078401916020909101906200028a565b5061012082015160088201556101408201516009820155610160820151600a8201805461018085015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790556101a090920151600b90910180546001600160a01b0319169190921617905560005b83518161ffff1610156200021e57600d848261ffff16815181106200019c576200019c62000720565b6020908102919091018101518254600181810185556000948552938390208251600290920201805493830151604084015161ffff9081166401000000000261ffff60201b19928216620100000263ffffffff19909716919094161794909417939093161782556060015191015580620002158162000736565b91505062000173565b506080919091526001600160a01b031660a05250620007a49050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620002989062000767565b90600052602060002090601f016020900481019282620002bc576000855562000307565b82601f10620002d757805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000307578251825591602001919060010190620002ea565b506200031592915062000319565b5090565b5b808211156200031557600081556001016200031a565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156200036b576200036b62000330565b60405290565b6040516101c081016001600160401b03811182821017156200036b576200036b62000330565b604051601f8201601f191681016001600160401b0381118282101715620003c257620003c262000330565b604052919050565b80516001600160a01b0381168114620003e257600080fd5b919050565b805160078110620003e257600080fd5b600082601f8301126200040957600080fd5b81516001600160401b0381111562000425576200042562000330565b60206200043b601f8301601f1916820162000397565b82815285828487010111156200045057600080fd5b60005b838110156200047057858101830151828201840152820162000453565b83811115620004825760008385840101525b5095945050505050565b805160ff81168114620003e257600080fd5b805161ffff81168114620003e257600080fd5b600082601f830112620004c357600080fd5b815160206001600160401b03821115620004e157620004e162000330565b620004f1818360051b0162000397565b82815260079290921b840181019181810190868411156200051157600080fd5b8286015b84811015620005845760808189031215620005305760008081fd5b6200053a62000346565b62000545826200049e565b8152620005548583016200049e565b858201526040620005678184016200049e565b908201526060828101519082015283529183019160800162000515565b509695505050505050565b60008060008060808587031215620005a657600080fd5b84516001600160401b0380821115620005be57600080fd5b908601906101c08289031215620005d457600080fd5b620005de62000371565b82518152620005f060208401620003ca565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201526200062b60c08401620003ca565b60c08201526200063e60e08401620003e7565b60e082015261010080840151838111156200065857600080fd5b620006668b828701620003f7565b828401525050610120808401518183015250610140808401518183015250610160620006948185016200048c565b90820152610180620006a8848201620003ca565b908201526101a0620006bc848201620003ca565b908201526020880151909650915080821115620006d857600080fd5b50620006e787828801620004b1565b93505060408501519150620006ff60608601620003ca565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818114156200075d57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b600181811c908216806200077c57607f821691505b602082108114156200079e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051614383620008176000396000818161047f01528181610636015281816107b001528181610d4b01528181610fd1015281816115b401528181611ab20152818161223c015281816124c601528181612b130152612dc50152600081816102ea015261141f01526143836000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80639b54a8171161010f578063bdd4d18d116100a2578063e36e196911610071578063e36e1969146104e7578063f23a6e61146104fe578063f2fde38b14610511578063fc33962c1461052457600080fd5b8063bdd4d18d1461047a578063bf89662d146104a1578063cedd9b53146104ae578063daea85c5146104d457600080fd5b8063accff552116100de578063accff552146103dc578063ad799e101461041f578063bc197c8114610432578063bd55db3a1461046757600080fd5b80639b54a817146103995780639d9d2fbc146103ae5780639e6d77d0146103c1578063aaa5ad61146103d457600080fd5b80636681b9fd1161018757806383817f1a1161015657806383817f1a1461030c57806387e320e41461032f5780638da5cb5b1461036157806398590ef91461038657600080fd5b80636681b9fd146102c1578063715018a6146102ca57806376a67a51146102d25780637ff9b596146102e557600080fd5b80632af2bfd7116101c35780632af2bfd71461026d57806357b001f91461028f5780635c202a4c146102a25780635c975abb146102b957600080fd5b806301ffc9a7146101f557806310e29cf91461021d5780631d29572714610232578063201dfbce1461025a575b600080fd5b61020861020336600461380f565b610537565b60405190151581526020015b60405180910390f35b61023061022b36600461384e565b61056e565b005b61024561024036600461386b565b610715565b60408051928352602083019190915201610214565b6102306102683660046138b2565b610931565b610275610b3e565b6040516102149e9d9c9b9a9998979695949392919061398d565b61023061029d36600461384e565b610c3d565b6102ab60125481565b604051908152602001610214565b610208610e17565b6102ab60115481565b610230610e72565b6102306102e036600461384e565b610ec6565b6102ab7f000000000000000000000000000000000000000000000000000000000000000081565b61031f61031a36600461384e565b611099565b6040516102149493929190613aa5565b61034261033d366004613ad1565b6113ed565b604080516001600160a01b039093168352602083019190915201610214565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610214565b610230610394366004613af6565b6114a6565b6103a16117da565b6040516102149190613c14565b6102306103bc366004613c27565b611948565b6102306103cf3660046138b2565b611cb4565b6102ab611e66565b6103ef6103ea366004613c78565b611eda565b604051610214949392919061ffff9485168152928416602084015292166040820152606081019190915260800190565b61023061042d366004613c91565b611f20565b61044e610440366004613d73565b600098975050505050505050565b6040516001600160e01b03199091168152602001610214565b610230610475366004613af6565b6121a4565b61036e7f000000000000000000000000000000000000000000000000000000000000000081565b6015546102089060ff1681565b6104c16104bc366004613af6565b6123bc565b60405161ffff9091168152602001610214565b6102306104e236600461384e565b612403565b6104ef6125a0565b60405161021493929190613e32565b61044e61050c366004613e68565b6127b9565b61023061051f36600461384e565b612995565b6102ab61053236600461384e565b612a4e565b60006301ffc9a760e01b6001600160e01b0319831614806105685750630271189760e51b6001600160e01b03198316145b92915050565b600180600754600160a01b900460ff16600681111561058f5761058f6138fd565b146105cf5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064015b60405180910390fd5b6000546001600160a01b031633146106175760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190613ee4565b6106b957600080fd5b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c60016004846040516106ee93929190613f01565b60405180910390a1600780546004919060ff60a01b1916600160a01b835b02179055505050565b600080600280600754600160a01b900460ff166006811115610739576107396138fd565b146107745760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b8461077e81612d81565b8061082a575060155460ff16801561082a5750604051630da431c960e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b1580156107f257600080fd5b505afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190613ee4565b61088a5760405162461bcd60e51b815260206004820152602b60248201527f43616e206f6e6c792062652063616c6c65642066726f6d2063726561746f722060448201526a6f722064656c656761746560a81b60648201526084016105c6565b6000546001600160a01b031633146108d25760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6108da610e17565b1561091a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6109248686612e41565b9097909650945050505050565b600280600754600160a01b900460ff166006811115610952576109526138fd565b1461098d5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b031633146109d55760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6109dd610e17565b15610a1d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b600954158015610a315750610a3184612d81565b80610a62575060095415801590610a4a57506009544210155b8015610a625750610a5a84612d81565b80610a625750825b610ad45760405162461bcd60e51b815260206004820152603860248201527f43616e6e6f742062652066696e6973686564206265666f72652066696e69736860448201527f2064617465206f72206f6e6c792062792063726561746f72000000000000000060648201526084016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c6002600386604051610b0993929190613f01565b60405180910390a1600780546003919060ff60a01b1916600160a01b835b0217905550610b368483612e41565b505050505050565b600180546002546003546004546005546006546007546008805497986001600160a01b0397881698969795969495939493831693600160a01b90930460ff1692909190610b8a90613f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb690613f33565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b50505060088401546009850154600a860154600b909601549495919490935060ff821692506001600160a01b03610100909204821691168e565b6000546001600160a01b03163314610c855760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff166006811115610ca657610ca66138fd565b14610ce15760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b610ce9610e17565b610d2c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190613ee4565b610e0b5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b610e13612f74565b5050565b600080546001600160a01b03163314610e605760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600054600160a01b900460ff16905090565b6000546001600160a01b03163314610eba5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b610ec4600061300c565b565b6000546001600160a01b03163314610f0e5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff166006811115610f2f57610f2f6138fd565b14610f6a5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b610f72610e17565b15610fb25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190613ee4565b6110915760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b610e13613069565b601054600154604051627eeac760e11b8152600092606092849283926001600160a01b03169162fdd58e916110e69189916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111369190613f6e565b6001600160a01b0386166000908152600e60209081526040808320805482518185028101850190935280835294985092939092918301828280156111c157602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116111885790505b505050506001600160a01b0388166000908152600f60205260408120929350916111eb91506130ec565b9050805167ffffffffffffffff81111561120757611207613f87565b60405190808252806020026020018201604052801561125957816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816112255790505b50945060005b81518161ffff16101561137a576000828261ffff168151811061128457611284613f9d565b602002602001015190506000600d60018361129f9190613fc9565b61ffff16815481106112b3576112b3613f9d565b60009182526020808320604080516080810182526002909402909101805461ffff8082168652620100008204811694860194909452640100000000900490921690830152600101546060820152915061130c8387613100565b905060405180608001604052808461ffff168152602001836020015161ffff1681526020018261ffff1681526020018360600151815250898561ffff168151811061135957611359613f9d565b6020026020010181905250505050808061137290613fec565b91505061125f565b506001600160a01b0387166000908152601360205260409020546005549094506113a55760006113e2565b6001600160a01b0387166000908152601460205260409020546005546012546113ce908961400e565b6113d8919061402d565b6113e2919061404f565b925050509193509193565b600c546040516316b9575360e21b815260009182916001600160a01b0390911690635ae55d4c9061144b9030906001907f0000000000000000000000000000000000000000000000000000000000000000908a908a90600401614106565b604080518083038186803b15801561146257600080fd5b505afa158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a919061423a565b915091505b9250929050565b6000546001600160a01b031633146114ee5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff16600681111561150f5761150f6138fd565b1461154a5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b611552610e17565b6115955760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190613ee4565b6116745760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b6116814262278d00614268565b8210156116d05760405162461bcd60e51b815260206004820152601d60248201527f526566756e6420706572696f64206e6f74206c6f6e6720656e6f75676800000060448201526064016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c600260038560405161170593929190613f01565b60405180910390a160078054600360a01b60ff60a01b19821617909155600a8390556015805460ff191660011790556040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190613f6e565b905080601260008282546117c59190614268565b909155506117d39050612f74565b5050505050565b6117e2613768565b604080516101c0810182526001805482526002546001600160a01b03908116602084015260035493830193909352600454606083015260055460808301526006805460a084015260075493841660c08401529192909160e0840191600160a01b900460ff1690811115611857576118576138fd565b6006811115611868576118686138fd565b815260200160078201805461187c90613f33565b80601f01602080910402602001604051908101604052809291908181526020018280546118a890613f33565b80156118f55780601f106118ca576101008083540402835291602001916118f5565b820191906000526020600020905b8154815290600101906020018083116118d857829003601f168201915b50505091835250506008820154602082015260098201546040820152600a82015460ff811660608301526001600160a01b0361010090910481166080830152600b9092015490911660a090910152919050565b600280600754600160a01b900460ff166006811115611969576119696138fd565b146119a45760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6119ac610e17565b156119ec5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6000546001600160a01b03163314611a345760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600554600354611a44919061404f565b841115611a935760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320617661696c61626c65000000000060448201526064016105c6565b60405163cee2a9cf60e01b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063cee2a9cf9060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190613ee4565b80611b3957506006548411155b611b995760405162461bcd60e51b815260206004820152602b60248201527f4e6565647320696e766573746f7220726f6c6520746f2062757920616d6f756e60448201526a74206f6620746f6b656e7360a81b60648201526084016105c6565b611ba4858584613165565b8260116000828254611bb69190614268565b9091555050604080516001600160a01b03871681526020810186905290810184905261ffff831660608201527f7d4ca136516fc19227d5eb2803a1ee09fd6f86fef531acaa28f1500fdf2c6abb9060800160405180910390a18360016004016000828254611c249190614268565b9091555050601054600154604051637921219560e11b81523060048201526001600160a01b03888116602483015260448201929092526064810187905260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b158015611c9557600080fd5b505af1158015611ca9573d6000803e3d6000fd5b505050505050505050565b600380600754600160a01b900460ff166006811115611cd557611cd56138fd565b14611d105760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b03163314611d585760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600a54158015611d6c5750611d6c84612d81565b80611d9d5750600a5415801590611d855750600a544210155b8015611d9d5750611d9584612d81565b80611d9d5750825b611e0f5760405162461bcd60e51b815260206004820152603560248201527f43616e6e6f7420626520636c6f736564206265666f726520636c6f736520646160448201527f7465206f72206f6e6c792062792063726561746f72000000000000000000000060648201526084016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c6003600686604051611e4493929190613f01565b60405180910390a1600780546006919060ff60a01b1916600160a01b83610b27565b6000600280600754600160a01b900460ff166006811115611e8957611e896138fd565b14611ec45760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b600554600354611ed4919061404f565b91505090565b600d8181548110611eea57600080fd5b60009182526020909120600290910201805460019091015461ffff80831693506201000083048116926401000000009004169084565b6010546001600160a01b03163314611f7a5760405162461bcd60e51b815260206004820152601d60248201527f556e6b6e6f776e20746f6b656e20636f6e74726163742073656e64657200000060448201526064016105c6565b6001548414611fcb5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016105c6565b6000811161201b5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e7320746f207472616e73666572206d757374206265203e2030000060448201526064016105c6565b601054600154604051627eeac760e11b81526000926001600160a01b03169162fdd58e916120619188916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b19190613f6e565b90508181101561210d5760405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e742062616c616e636520666f72207472616e7366656044820152603960f91b60648201526084016105c6565b6001600160a01b0384166000908152601460205260408120548290612132908561400e565b61213c919061402d565b6001600160a01b03861660009081526014602052604081208054929350839290919061216990849061404f565b90915550506001600160a01b03841660009081526014602052604081208054839290612196908490614268565b909155505050505050505050565b600380600754600160a01b900460ff1660068111156121c5576121c56138fd565b146122005760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b8261220a81612d81565b806122b6575060155460ff1680156122b65750604051630da431c960e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561227e57600080fd5b505afa158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b69190613ee4565b6123165760405162461bcd60e51b815260206004820152602b60248201527f43616e206f6e6c792062652063616c6c65642066726f6d2063726561746f722060448201526a6f722064656c656761746560a81b60648201526084016105c6565b6000546001600160a01b0316331461235e5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604080518481526001600160a01b03861660208201527f57da78579f402bda9a94ba7ca3c2f2ddcad9e106acef9ef6799220f200fe6ff0910160405180910390a182601260008282546123b19190614268565b909155505050505050565b600e60205281600052604060002081815481106123d857600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b600180600754600160a01b900460ff166006811115612424576124246138fd565b1461245f5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b031633146124a75760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613ee4565b61254957600080fd5b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c600160028460405161257e93929190613f01565b60405180910390a1600780546002919060ff60a01b1916600160a01b8361070c565b6125a8613768565b601154604080516101c0810182526001805482526002546001600160a01b0390811660208401526003549383019390935260045460608084019190915260055460808401526006805460a085015260075494851660c085015290946000949293600d9391929091859160e0840191600160a01b900460ff1690811115612630576126306138fd565b6006811115612641576126416138fd565b815260200160078201805461265590613f33565b80601f016020809104026020016040519081016040528092919081815260200182805461268190613f33565b80156126ce5780601f106126a3576101008083540402835291602001916126ce565b820191906000526020600020905b8154815290600101906020018083116126b157829003601f168201915b505050918352505060088201546020808301919091526009830154604080840191909152600a84015460ff811660608501526001600160a01b0361010090910481166080850152600b9094015490931660a09092019190915284548251818302810183019093528083529295509091849160009084015b828210156127a85760008481526020908190206040805160808101825260028602909201805461ffff8082168552620100008204811685870152640100000000909104169183019190915260019081015460608301529083529092019101612745565b505050509150925092509250909192565b6000600180600754600160a01b900460ff1660068111156127dc576127dc6138fd565b146128175760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b600154156128675760405162461bcd60e51b815260206004820152601160248201527f546f6b656e20616c72656164792073657400000000000000000000000000000060448201526064016105c6565b60035485146128b85760405162461bcd60e51b815260206004820152601360248201527f57726f6e6720616d6f756e74206d696e7465640000000000000000000000000060448201526064016105c6565b60018690556010805473ffffffffffffffffffffffffffffffffffffffff19163317905560045415612981576010546002546004805460408051602081018252600081529051637921219560e11b81526001600160a01b039586169563f242432a9561292f95309592909116938e93909101614280565b600060405180830381600087803b15801561294957600080fd5b505af115801561295d573d6000803e3d6000fd5b505050506001600301546001600401600082825461297b9190614268565b90915550505b5063f23a6e6160e01b979650505050505050565b6000546001600160a01b031633146129dd5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6001600160a01b038116612a425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c6565b612a4b8161300c565b50565b6000600380600754600160a01b900460ff166006811115612a7157612a716138fd565b14612aac5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b03163314612af45760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b60405163cee2a9cf60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063cee2a9cf9060240160206040518083038186803b158015612b5557600080fd5b505afa158015612b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8d9190613ee4565b612be35760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920696e766573746f72732063616e20636c61696d2070726f636565646044820152607360f81b60648201526084016105c6565b601054600154604051627eeac760e11b81526000926001600160a01b03169162fdd58e91612c299188916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015612c4157600080fd5b505afa158015612c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c799190613f6e565b6001600160a01b0385166000908152601460205260409020546005546012549293509091612ca7908461400e565b612cb1919061402d565b612cbb919061404f565b6001600160a01b038516600090815260136020526040812080549295508592909190612ce8908490614268565b90915550506001600160a01b03841660009081526014602052604081208054859290612d15908490614268565b90915550508215612d7a57604080518481526001600160a01b03861660208201527f7ae234f282e32d9045ebb99a2727e371aabe9285ae8f3888388543d61ffea922910160405180910390a16007546001600160a01b0316612d788186866133f2565b505b5050919050565b6002546000906001600160a01b0383811691161480610568575060025460405163d8d9a39160e01b81526001600160a01b03848116600483015291821660248201527f00000000000000000000000000000000000000000000000000000000000000009091169063d8d9a3919060440160206040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190613ee4565b6007546040516370a0823160e01b815230600482015260009182916001600160a01b0390911690829082906370a082319060240160206040518083038186803b158015612e8d57600080fd5b505afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190613f6e565b600b54909150606490612edb9060ff168361400e565b612ee5919061402d565b9250612ef1838261404f565b60408051828152602081018690526001600160a01b0389168183015290519195507ff2eab73588c8e9161f6a438fe2a8b08c31f71f570c0c8ca9c9d200ea098f7455919081900360600190a1600254612f57906001600160a01b038481169116866133f2565b612f6b6001600160a01b03831686856133f2565b50509250929050565b612f7c610e17565b612fbf5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613071610e17565b156130b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fef3390565b606060006130f98361345e565b9392505050565b6000805b82518161ffff16101561315e578361ffff16838261ffff168151811061312c5761312c613f9d565b602002602001015161ffff16141561314c576131496001836142b8565b91505b8061315681613fec565b915050613104565b5092915050565b61ffff811661317357505050565b600d5461ffff821611156131c95760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964207065726b496400000000000000000000000000000000000060448201526064016105c6565b6000600d6131d8600184613fc9565b61ffff16815481106131ec576131ec613f9d565b60009182526020909120600290910201805490915061ffff640100000000820481166201000090920416116132635760405162461bcd60e51b815260206004820152601260248201527f5065726b206e6f7420617661696c61626c65000000000000000000000000000060448201526064016105c6565b82816001015411156132b75760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e7320746f20636c61696d00000000000060448201526064016105c6565b805460019082906004906132d8908490640100000000900461ffff166142b8565b825461ffff91821661010093840a90810290830219909116179092556001600160a01b0387166000818152600e602090815260408083208054600181018255908452828420601082040180548b89166002600f9485160290980a8881029902191697909717909655928252939093529091206133559250906134ba565b50600b5461010090046001600160a01b0316156133ec57600b5460015460405163396d6e9f60e21b81526001600160a01b038781166004830152602482019290925261ffff8516604482015260648101869052610100909204169063e5b5ba7c90608401600060405180830381600087803b1580156133d357600080fd5b505af11580156133e7573d6000803e3d6000fd5b505050505b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526134599084906134c6565b505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156134ae57602002820191906000526020600020905b81548152602001906001019080831161349a575b50505050509050919050565b60006130f98383613598565b600061351b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135e79092919063ffffffff16565b80519091501561345957808060200190518101906135399190613ee4565b6134595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c6565b60008181526001830160205260408120546135df57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610568565b506000610568565b60606135f684846000856135fe565b949350505050565b60608247101561365f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c6565b6001600160a01b0385163b6136b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c6565b600080866001600160a01b031685876040516136d291906142de565b60006040518083038185875af1925050503d806000811461370f576040519150601f19603f3d011682016040523d82523d6000602084013e613714565b606091505b509150915061372482828661372f565b979650505050505050565b6060831561373e5750816130f9565b82511561374e5782518084602001fd5b8160405162461bcd60e51b81526004016105c691906142fa565b604051806101c001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600060068111156137ca576137ca6138fd565b8152602001606081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b60006020828403121561382157600080fd5b81356001600160e01b0319811681146130f957600080fd5b6001600160a01b0381168114612a4b57600080fd5b60006020828403121561386057600080fd5b81356130f981613839565b6000806040838503121561387e57600080fd5b823561388981613839565b9150602083013561389981613839565b809150509250929050565b8015158114612a4b57600080fd5b6000806000606084860312156138c757600080fd5b83356138d281613839565b925060208401356138e2816138a4565b915060408401356138f281613839565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b6007811061393157634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015613950578181015183820152602001613938565b838111156133ec5750506000910152565b60008151808452613979816020860160208601613935565b601f01601f19169290920160200192915050565b8e81526001600160a01b038e1660208201528c60408201528b60608201528a60808201528960a08201526001600160a01b03891660c08201526139d360e0820189613913565b6101c061010082015260006139ec6101c0830189613961565b90508661012083015285610140830152613a0c61016083018660ff169052565b6001600160a01b0384166101808301526001600160a01b0383166101a08301529f9e505050505050505050505050505050565b600081518084526020808501945080840160005b83811015613a9a578151805161ffff9081168952848201518116858a0152604080830151909116908901526060908101519088015260809096019590820190600101613a53565b509495945050505050565b848152608060208201526000613abe6080830186613a3f565b6040830194909452506060015292915050565b60008060408385031215613ae457600080fd5b82359150602083013561389981613839565b60008060408385031215613b0957600080fd5b8235613b1481613839565b946020939093013593505050565b60006101c0825184526020830151613b4560208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c0830151613b8860c08601826001600160a01b03169052565b5060e0830151613b9b60e0860182613913565b50610100808401518282870152613bb483870182613961565b9250505061012080840151818601525061014080840151818601525061016080840151613be58287018260ff169052565b5050610180838101516001600160a01b03908116918601919091526101a0938401511692909301919091525090565b6020815260006130f96020830184613b22565b60008060008060808587031215613c3d57600080fd5b8435613c4881613839565b93506020850135925060408501359150606085013561ffff81168114613c6d57600080fd5b939692955090935050565b600060208284031215613c8a57600080fd5b5035919050565b600080600080600060a08688031215613ca957600080fd5b8535613cb481613839565b9450602086013593506040860135613ccb81613839565b92506060860135613cdb81613839565b949793965091946080013592915050565b60008083601f840112613cfe57600080fd5b50813567ffffffffffffffff811115613d1657600080fd5b6020830191508360208260051b850101111561149f57600080fd5b60008083601f840112613d4357600080fd5b50813567ffffffffffffffff811115613d5b57600080fd5b60208301915083602082850101111561149f57600080fd5b60008060008060008060008060a0898b031215613d8f57600080fd5b8835613d9a81613839565b97506020890135613daa81613839565b9650604089013567ffffffffffffffff80821115613dc757600080fd5b613dd38c838d01613cec565b909850965060608b0135915080821115613dec57600080fd5b613df88c838d01613cec565b909650945060808b0135915080821115613e1157600080fd5b50613e1e8b828c01613d31565b999c989b5096995094979396929594505050565b606081526000613e456060830186613b22565b8281036020840152613e578186613a3f565b915050826040830152949350505050565b60008060008060008060a08789031215613e8157600080fd5b8635613e8c81613839565b95506020870135613e9c81613839565b94506040870135935060608701359250608087013567ffffffffffffffff811115613ec657600080fd5b613ed289828a01613d31565b979a9699509497509295939492505050565b600060208284031215613ef657600080fd5b81516130f9816138a4565b60608101613f0f8286613913565b613f1c6020830185613913565b6001600160a01b0383166040830152949350505050565b600181811c90821680613f4757607f821691505b60208210811415613f6857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613f8057600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff83811690831681811015613fe457613fe4613fb3565b039392505050565b600061ffff8083168181141561400457614004613fb3565b6001019392505050565b600081600019048311821515161561402857614028613fb3565b500290565b60008261404a57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561406157614061613fb3565b500390565b8054600090600181811c908083168061408057607f831692505b60208084108214156140a257634e487b7160e01b600052602260045260246000fd5b838852602088018280156140bd57600181146140ce576140f9565b60ff198716825282820197506140f9565b60008981526020902060005b878110156140f3578154848201529086019084016140da565b83019850505b5050505050505092915050565b60006001600160a01b03808816835260a06020840152865460a084015261413760018801546001600160a01b031690565b6001600160a01b03811660c085015250600287015460e084015260038701546101008401526004870154610120840152600587015461014084015260068701546001600160a01b038282161661016085015261419d610180850160ff8360a01c16613913565b506101c0806101a08501526141b9610260850160078a01614066565b60088901549185019190915260098801546101e0850152600a88015460ff8116610200860152906141fb6102208601848460081c166001600160a01b03169052565b600b8901546001600160a01b039081166102408701526040860189905260608601889052861660808601529250614230915050565b9695505050505050565b6000806040838503121561424d57600080fd5b825161425881613839565b6020939093015192949293505050565b6000821982111561427b5761427b613fb3565b500190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261372460a0830184613961565b600061ffff8083168185168083038211156142d5576142d5613fb3565b01949350505050565b600082516142f0818460208701613935565b9190910192915050565b6020815260006130f9602083018461396156fe4e6f7420696e20726571756972656420737461746500000000000000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d8a7de39e65bd28a32b9f0491fa26109d943e2f1151ae3601476743782fb157c64736f6c63430008090033a26469706673582212201a980eea1f12435564d9ee50dbeec02620d0127973b0e4270ba2e79bd5e7ccef64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063ac3bb44a1462000033575b600080fd5b6200004a62000044366004620005be565b6200004c565b005b6001546040516341676f1560e01b81523360048201526001600160a01b03909116906341676f159060240160206040518083038186803b1580156200009057600080fd5b505afa158015620000a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cb919062000604565b6200011c5760405162461bcd60e51b815260206004820152601060248201527f4e6f7420616e206f7267616e697a657200000000000000000000000000000000604482015260640160405180910390fd5b60006200012d60a083018362000628565b905067ffffffffffffffff8111156200014a576200014a6200067c565b6040519080825280602002602001820160405280156200019e57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181620001695790505b50905060005b81518161ffff16101562000273576000620001c360a085018562000628565b8361ffff16818110620001da57620001da62000692565b905060400201803603810190620001f29190620006a8565b905060405180608001604052808360016200020e91906200072e565b61ffff168152602001826000015161ffff168152602001600061ffff1681526020018260200151815250838361ffff168151811062000251576200025162000692565b60200260200101819052505080806200026a9062000757565b915050620001a4565b506000604051806101c0016040528060008152602001336001600160a01b0316815260200184600001358152602001846020013581526020016000815260200184608001358152602001846060016020810190620002d291906200077c565b6001600160a01b0316815260200160018152602001620002f660c0860186620007a7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060e0850135602082015261010085013560408201526060016200035961014086016101208701620007f1565b60ff16815260200162000375610160860161014087016200077c565b6001600160a01b0390811682526002548116602090920191909152600154604080519394506000938593879392890135921690620003b390620005b0565b620003c29493929190620008f1565b604051809103906000f080158015620003df573d6000803e3d6000fd5b5060005460405163f2fde38b60e01b81526001600160a01b03918216600482015291925082169063f2fde38b90602401600060405180830381600087803b1580156200042a57600080fd5b505af11580156200043f573d6000803e3d6000fd5b50600092506200045b915050610160860161014087016200077c565b6001600160a01b031614620004cf576101808201516040516339d3ad7760e01b81526001600160a01b038381166004830152909116906339d3ad7790602401600060405180830381600087803b158015620004b557600080fd5b505af1158015620004ca573d6000803e3d6000fd5b505050505b60008054604051634982bdd360e11b81526001600160a01b03848116600483015233602483015287356044830152909116906393057ba690606401602060405180830381600087803b1580156200052557600080fd5b505af11580156200053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000560919062000a3e565b60408051873581526001600160a01b0385166020820152919250339183917f3456760ea9dedbb2f1547f379062707350387eb715c468c5b3f4ca6f5d041d73910160405180910390a35050505050565b614b9a8062000a5983390190565b600060208284031215620005d157600080fd5b813567ffffffffffffffff811115620005e957600080fd5b82016101608185031215620005fd57600080fd5b9392505050565b6000602082840312156200061757600080fd5b81518015158114620005fd57600080fd5b6000808335601e198436030181126200064057600080fd5b83018035915067ffffffffffffffff8211156200065c57600080fd5b6020019150600681901b36038213156200067557600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060408284031215620006bb57600080fd5b6040516040810181811067ffffffffffffffff82111715620006ed57634e487b7160e01b600052604160045260246000fd5b604052823561ffff811681146200070357600080fd5b81526020928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168185168083038211156200074e576200074e62000718565b01949350505050565b600061ffff8083168181141562000772576200077262000718565b6001019392505050565b6000602082840312156200078f57600080fd5b81356001600160a01b0381168114620005fd57600080fd5b6000808335601e19843603018112620007bf57600080fd5b83018035915067ffffffffffffffff821115620007db57600080fd5b6020019150368190038213156200067557600080fd5b6000602082840312156200080457600080fd5b813560ff81168114620005fd57600080fd5b600781106200083557634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015620008615760208185018101518683018201520162000843565b8181111562000874576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015620008e6578151805161ffff9081168952848201518116858a01526040808301519091169089015260609081015190880152608090960195908201906001016200089d565b509495945050505050565b6080815284516080820152600060208601516200091960a08401826001600160a01b03169052565b50604086015160c0830152606086015160e08301526080860151610100818185015260a08801519150610120828186015260c0890151925061014062000969818701856001600160a01b03169052565b60e08a01519350610160620009818188018662000816565b838b015194506101c093506101808481890152620009a461024089018762000839565b9550838c015193506101a084818a0152838d0151868a0152828d01519550620009d36101e08a018760ff169052565b908c01516001600160a01b039081166102008a0152908c0151908116610220890152935062000a0192505050565b50828103602084015262000a16818762000889565b91505083604083015262000a3560608301846001600160a01b03169052565b95945050505050565b60006020828403121562000a5157600080fd5b505191905056fe60c06040523480156200001157600080fd5b5060405162004b9a38038062004b9a83398101604081905262000034916200058f565b6200003f336200023a565b6000805460ff60a01b19169055835160019081556020850151600280546001600160a01b039283166001600160a01b03199182161790915560408701516003556060870151600455608087015160055560a0870151600690815560c088015160078054919094169281168317845560e0890151899594909390926001600160a81b03199092161790600160a01b908490811115620000e157620000e16200070a565b02179055506101008201518051620001049160078401916020909101906200028a565b5061012082015160088201556101408201516009820155610160820151600a8201805461018085015160ff9093166001600160a81b0319909116176101006001600160a01b03938416021790556101a090920151600b90910180546001600160a01b0319169190921617905560005b83518161ffff1610156200021e57600d848261ffff16815181106200019c576200019c62000720565b6020908102919091018101518254600181810185556000948552938390208251600290920201805493830151604084015161ffff9081166401000000000261ffff60201b19928216620100000263ffffffff19909716919094161794909417939093161782556060015191015580620002158162000736565b91505062000173565b506080919091526001600160a01b031660a05250620007a49050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620002989062000767565b90600052602060002090601f016020900481019282620002bc576000855562000307565b82601f10620002d757805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000307578251825591602001919060010190620002ea565b506200031592915062000319565b5090565b5b808211156200031557600081556001016200031a565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156200036b576200036b62000330565b60405290565b6040516101c081016001600160401b03811182821017156200036b576200036b62000330565b604051601f8201601f191681016001600160401b0381118282101715620003c257620003c262000330565b604052919050565b80516001600160a01b0381168114620003e257600080fd5b919050565b805160078110620003e257600080fd5b600082601f8301126200040957600080fd5b81516001600160401b0381111562000425576200042562000330565b60206200043b601f8301601f1916820162000397565b82815285828487010111156200045057600080fd5b60005b838110156200047057858101830151828201840152820162000453565b83811115620004825760008385840101525b5095945050505050565b805160ff81168114620003e257600080fd5b805161ffff81168114620003e257600080fd5b600082601f830112620004c357600080fd5b815160206001600160401b03821115620004e157620004e162000330565b620004f1818360051b0162000397565b82815260079290921b840181019181810190868411156200051157600080fd5b8286015b84811015620005845760808189031215620005305760008081fd5b6200053a62000346565b62000545826200049e565b8152620005548583016200049e565b858201526040620005678184016200049e565b908201526060828101519082015283529183019160800162000515565b509695505050505050565b60008060008060808587031215620005a657600080fd5b84516001600160401b0380821115620005be57600080fd5b908601906101c08289031215620005d457600080fd5b620005de62000371565b82518152620005f060208401620003ca565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201526200062b60c08401620003ca565b60c08201526200063e60e08401620003e7565b60e082015261010080840151838111156200065857600080fd5b620006668b828701620003f7565b828401525050610120808401518183015250610140808401518183015250610160620006948185016200048c565b90820152610180620006a8848201620003ca565b908201526101a0620006bc848201620003ca565b908201526020880151909650915080821115620006d857600080fd5b50620006e787828801620004b1565b93505060408501519150620006ff60608601620003ca565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600061ffff808316818114156200075d57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b600181811c908216806200077c57607f821691505b602082108114156200079e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051614383620008176000396000818161047f01528181610636015281816107b001528181610d4b01528181610fd1015281816115b401528181611ab20152818161223c015281816124c601528181612b130152612dc50152600081816102ea015261141f01526143836000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80639b54a8171161010f578063bdd4d18d116100a2578063e36e196911610071578063e36e1969146104e7578063f23a6e61146104fe578063f2fde38b14610511578063fc33962c1461052457600080fd5b8063bdd4d18d1461047a578063bf89662d146104a1578063cedd9b53146104ae578063daea85c5146104d457600080fd5b8063accff552116100de578063accff552146103dc578063ad799e101461041f578063bc197c8114610432578063bd55db3a1461046757600080fd5b80639b54a817146103995780639d9d2fbc146103ae5780639e6d77d0146103c1578063aaa5ad61146103d457600080fd5b80636681b9fd1161018757806383817f1a1161015657806383817f1a1461030c57806387e320e41461032f5780638da5cb5b1461036157806398590ef91461038657600080fd5b80636681b9fd146102c1578063715018a6146102ca57806376a67a51146102d25780637ff9b596146102e557600080fd5b80632af2bfd7116101c35780632af2bfd71461026d57806357b001f91461028f5780635c202a4c146102a25780635c975abb146102b957600080fd5b806301ffc9a7146101f557806310e29cf91461021d5780631d29572714610232578063201dfbce1461025a575b600080fd5b61020861020336600461380f565b610537565b60405190151581526020015b60405180910390f35b61023061022b36600461384e565b61056e565b005b61024561024036600461386b565b610715565b60408051928352602083019190915201610214565b6102306102683660046138b2565b610931565b610275610b3e565b6040516102149e9d9c9b9a9998979695949392919061398d565b61023061029d36600461384e565b610c3d565b6102ab60125481565b604051908152602001610214565b610208610e17565b6102ab60115481565b610230610e72565b6102306102e036600461384e565b610ec6565b6102ab7f000000000000000000000000000000000000000000000000000000000000000081565b61031f61031a36600461384e565b611099565b6040516102149493929190613aa5565b61034261033d366004613ad1565b6113ed565b604080516001600160a01b039093168352602083019190915201610214565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610214565b610230610394366004613af6565b6114a6565b6103a16117da565b6040516102149190613c14565b6102306103bc366004613c27565b611948565b6102306103cf3660046138b2565b611cb4565b6102ab611e66565b6103ef6103ea366004613c78565b611eda565b604051610214949392919061ffff9485168152928416602084015292166040820152606081019190915260800190565b61023061042d366004613c91565b611f20565b61044e610440366004613d73565b600098975050505050505050565b6040516001600160e01b03199091168152602001610214565b610230610475366004613af6565b6121a4565b61036e7f000000000000000000000000000000000000000000000000000000000000000081565b6015546102089060ff1681565b6104c16104bc366004613af6565b6123bc565b60405161ffff9091168152602001610214565b6102306104e236600461384e565b612403565b6104ef6125a0565b60405161021493929190613e32565b61044e61050c366004613e68565b6127b9565b61023061051f36600461384e565b612995565b6102ab61053236600461384e565b612a4e565b60006301ffc9a760e01b6001600160e01b0319831614806105685750630271189760e51b6001600160e01b03198316145b92915050565b600180600754600160a01b900460ff16600681111561058f5761058f6138fd565b146105cf5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064015b60405180910390fd5b6000546001600160a01b031633146106175760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190613ee4565b6106b957600080fd5b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c60016004846040516106ee93929190613f01565b60405180910390a1600780546004919060ff60a01b1916600160a01b835b02179055505050565b600080600280600754600160a01b900460ff166006811115610739576107396138fd565b146107745760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b8461077e81612d81565b8061082a575060155460ff16801561082a5750604051630da431c960e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b1580156107f257600080fd5b505afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190613ee4565b61088a5760405162461bcd60e51b815260206004820152602b60248201527f43616e206f6e6c792062652063616c6c65642066726f6d2063726561746f722060448201526a6f722064656c656761746560a81b60648201526084016105c6565b6000546001600160a01b031633146108d25760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6108da610e17565b1561091a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6109248686612e41565b9097909650945050505050565b600280600754600160a01b900460ff166006811115610952576109526138fd565b1461098d5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b031633146109d55760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6109dd610e17565b15610a1d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b600954158015610a315750610a3184612d81565b80610a62575060095415801590610a4a57506009544210155b8015610a625750610a5a84612d81565b80610a625750825b610ad45760405162461bcd60e51b815260206004820152603860248201527f43616e6e6f742062652066696e6973686564206265666f72652066696e69736860448201527f2064617465206f72206f6e6c792062792063726561746f72000000000000000060648201526084016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c6002600386604051610b0993929190613f01565b60405180910390a1600780546003919060ff60a01b1916600160a01b835b0217905550610b368483612e41565b505050505050565b600180546002546003546004546005546006546007546008805497986001600160a01b0397881698969795969495939493831693600160a01b90930460ff1692909190610b8a90613f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb690613f33565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b50505060088401546009850154600a860154600b909601549495919490935060ff821692506001600160a01b03610100909204821691168e565b6000546001600160a01b03163314610c855760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff166006811115610ca657610ca66138fd565b14610ce15760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b610ce9610e17565b610d2c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190613ee4565b610e0b5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b610e13612f74565b5050565b600080546001600160a01b03163314610e605760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600054600160a01b900460ff16905090565b6000546001600160a01b03163314610eba5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b610ec4600061300c565b565b6000546001600160a01b03163314610f0e5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff166006811115610f2f57610f2f6138fd565b14610f6a5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b610f72610e17565b15610fb25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190613ee4565b6110915760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b610e13613069565b601054600154604051627eeac760e11b8152600092606092849283926001600160a01b03169162fdd58e916110e69189916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111369190613f6e565b6001600160a01b0386166000908152600e60209081526040808320805482518185028101850190935280835294985092939092918301828280156111c157602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116111885790505b505050506001600160a01b0388166000908152600f60205260408120929350916111eb91506130ec565b9050805167ffffffffffffffff81111561120757611207613f87565b60405190808252806020026020018201604052801561125957816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816112255790505b50945060005b81518161ffff16101561137a576000828261ffff168151811061128457611284613f9d565b602002602001015190506000600d60018361129f9190613fc9565b61ffff16815481106112b3576112b3613f9d565b60009182526020808320604080516080810182526002909402909101805461ffff8082168652620100008204811694860194909452640100000000900490921690830152600101546060820152915061130c8387613100565b905060405180608001604052808461ffff168152602001836020015161ffff1681526020018261ffff1681526020018360600151815250898561ffff168151811061135957611359613f9d565b6020026020010181905250505050808061137290613fec565b91505061125f565b506001600160a01b0387166000908152601360205260409020546005549094506113a55760006113e2565b6001600160a01b0387166000908152601460205260409020546005546012546113ce908961400e565b6113d8919061402d565b6113e2919061404f565b925050509193509193565b600c546040516316b9575360e21b815260009182916001600160a01b0390911690635ae55d4c9061144b9030906001907f0000000000000000000000000000000000000000000000000000000000000000908a908a90600401614106565b604080518083038186803b15801561146257600080fd5b505afa158015611476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149a919061423a565b915091505b9250929050565b6000546001600160a01b031633146114ee5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600280600754600160a01b900460ff16600681111561150f5761150f6138fd565b1461154a5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b611552610e17565b6115955760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b604051630da431c960e31b81526001600160a01b0384811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190613ee4565b6116745760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91036bab9ba1031329030b8383937bb32b960491b60448201526064016105c6565b6116814262278d00614268565b8210156116d05760405162461bcd60e51b815260206004820152601d60248201527f526566756e6420706572696f64206e6f74206c6f6e6720656e6f75676800000060448201526064016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c600260038560405161170593929190613f01565b60405180910390a160078054600360a01b60ff60a01b19821617909155600a8390556015805460ff191660011790556040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190613f6e565b905080601260008282546117c59190614268565b909155506117d39050612f74565b5050505050565b6117e2613768565b604080516101c0810182526001805482526002546001600160a01b03908116602084015260035493830193909352600454606083015260055460808301526006805460a084015260075493841660c08401529192909160e0840191600160a01b900460ff1690811115611857576118576138fd565b6006811115611868576118686138fd565b815260200160078201805461187c90613f33565b80601f01602080910402602001604051908101604052809291908181526020018280546118a890613f33565b80156118f55780601f106118ca576101008083540402835291602001916118f5565b820191906000526020600020905b8154815290600101906020018083116118d857829003601f168201915b50505091835250506008820154602082015260098201546040820152600a82015460ff811660608301526001600160a01b0361010090910481166080830152600b9092015490911660a090910152919050565b600280600754600160a01b900460ff166006811115611969576119696138fd565b146119a45760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6119ac610e17565b156119ec5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6000546001600160a01b03163314611a345760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600554600354611a44919061404f565b841115611a935760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320617661696c61626c65000000000060448201526064016105c6565b60405163cee2a9cf60e01b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063cee2a9cf9060240160206040518083038186803b158015611af457600080fd5b505afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c9190613ee4565b80611b3957506006548411155b611b995760405162461bcd60e51b815260206004820152602b60248201527f4e6565647320696e766573746f7220726f6c6520746f2062757920616d6f756e60448201526a74206f6620746f6b656e7360a81b60648201526084016105c6565b611ba4858584613165565b8260116000828254611bb69190614268565b9091555050604080516001600160a01b03871681526020810186905290810184905261ffff831660608201527f7d4ca136516fc19227d5eb2803a1ee09fd6f86fef531acaa28f1500fdf2c6abb9060800160405180910390a18360016004016000828254611c249190614268565b9091555050601054600154604051637921219560e11b81523060048201526001600160a01b03888116602483015260448201929092526064810187905260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b158015611c9557600080fd5b505af1158015611ca9573d6000803e3d6000fd5b505050505050505050565b600380600754600160a01b900460ff166006811115611cd557611cd56138fd565b14611d105760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b03163314611d585760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b600a54158015611d6c5750611d6c84612d81565b80611d9d5750600a5415801590611d855750600a544210155b8015611d9d5750611d9584612d81565b80611d9d5750825b611e0f5760405162461bcd60e51b815260206004820152603560248201527f43616e6e6f7420626520636c6f736564206265666f726520636c6f736520646160448201527f7465206f72206f6e6c792062792063726561746f72000000000000000000000060648201526084016105c6565b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c6003600686604051611e4493929190613f01565b60405180910390a1600780546006919060ff60a01b1916600160a01b83610b27565b6000600280600754600160a01b900460ff166006811115611e8957611e896138fd565b14611ec45760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b600554600354611ed4919061404f565b91505090565b600d8181548110611eea57600080fd5b60009182526020909120600290910201805460019091015461ffff80831693506201000083048116926401000000009004169084565b6010546001600160a01b03163314611f7a5760405162461bcd60e51b815260206004820152601d60248201527f556e6b6e6f776e20746f6b656e20636f6e74726163742073656e64657200000060448201526064016105c6565b6001548414611fcb5760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420746f6b656e2069640000000000000000000000000000000060448201526064016105c6565b6000811161201b5760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e7320746f207472616e73666572206d757374206265203e2030000060448201526064016105c6565b601054600154604051627eeac760e11b81526000926001600160a01b03169162fdd58e916120619188916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b19190613f6e565b90508181101561210d5760405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e742062616c616e636520666f72207472616e7366656044820152603960f91b60648201526084016105c6565b6001600160a01b0384166000908152601460205260408120548290612132908561400e565b61213c919061402d565b6001600160a01b03861660009081526014602052604081208054929350839290919061216990849061404f565b90915550506001600160a01b03841660009081526014602052604081208054839290612196908490614268565b909155505050505050505050565b600380600754600160a01b900460ff1660068111156121c5576121c56138fd565b146122005760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b8261220a81612d81565b806122b6575060155460ff1680156122b65750604051630da431c960e31b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561227e57600080fd5b505afa158015612292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b69190613ee4565b6123165760405162461bcd60e51b815260206004820152602b60248201527f43616e206f6e6c792062652063616c6c65642066726f6d2063726561746f722060448201526a6f722064656c656761746560a81b60648201526084016105c6565b6000546001600160a01b0316331461235e5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604080518481526001600160a01b03861660208201527f57da78579f402bda9a94ba7ca3c2f2ddcad9e106acef9ef6799220f200fe6ff0910160405180910390a182601260008282546123b19190614268565b909155505050505050565b600e60205281600052604060002081815481106123d857600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b600180600754600160a01b900460ff166006811115612424576124246138fd565b1461245f5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b031633146124a75760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b604051630da431c960e31b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636d218e489060240160206040518083038186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613ee4565b61254957600080fd5b7f576026e1931f5d22bd4e8daa2b9a1d285267e6b24a2e9108498eaaa709d30b8c600160028460405161257e93929190613f01565b60405180910390a1600780546002919060ff60a01b1916600160a01b8361070c565b6125a8613768565b601154604080516101c0810182526001805482526002546001600160a01b0390811660208401526003549383019390935260045460608084019190915260055460808401526006805460a085015260075494851660c085015290946000949293600d9391929091859160e0840191600160a01b900460ff1690811115612630576126306138fd565b6006811115612641576126416138fd565b815260200160078201805461265590613f33565b80601f016020809104026020016040519081016040528092919081815260200182805461268190613f33565b80156126ce5780601f106126a3576101008083540402835291602001916126ce565b820191906000526020600020905b8154815290600101906020018083116126b157829003601f168201915b505050918352505060088201546020808301919091526009830154604080840191909152600a84015460ff811660608501526001600160a01b0361010090910481166080850152600b9094015490931660a09092019190915284548251818302810183019093528083529295509091849160009084015b828210156127a85760008481526020908190206040805160808101825260028602909201805461ffff8082168552620100008204811685870152640100000000909104169183019190915260019081015460608301529083529092019101612745565b505050509150925092509250909192565b6000600180600754600160a01b900460ff1660068111156127dc576127dc6138fd565b146128175760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b600154156128675760405162461bcd60e51b815260206004820152601160248201527f546f6b656e20616c72656164792073657400000000000000000000000000000060448201526064016105c6565b60035485146128b85760405162461bcd60e51b815260206004820152601360248201527f57726f6e6720616d6f756e74206d696e7465640000000000000000000000000060448201526064016105c6565b60018690556010805473ffffffffffffffffffffffffffffffffffffffff19163317905560045415612981576010546002546004805460408051602081018252600081529051637921219560e11b81526001600160a01b039586169563f242432a9561292f95309592909116938e93909101614280565b600060405180830381600087803b15801561294957600080fd5b505af115801561295d573d6000803e3d6000fd5b505050506001600301546001600401600082825461297b9190614268565b90915550505b5063f23a6e6160e01b979650505050505050565b6000546001600160a01b031633146129dd5760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b6001600160a01b038116612a425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105c6565b612a4b8161300c565b50565b6000600380600754600160a01b900460ff166006811115612a7157612a716138fd565b14612aac5760405162461bcd60e51b8152602060048201526015602482015260008051602061430e83398151915260448201526064016105c6565b6000546001600160a01b03163314612af45760405162461bcd60e51b8152602060048201819052602482015260008051602061432e83398151915260448201526064016105c6565b60405163cee2a9cf60e01b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063cee2a9cf9060240160206040518083038186803b158015612b5557600080fd5b505afa158015612b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8d9190613ee4565b612be35760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920696e766573746f72732063616e20636c61696d2070726f636565646044820152607360f81b60648201526084016105c6565b601054600154604051627eeac760e11b81526000926001600160a01b03169162fdd58e91612c299188916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b158015612c4157600080fd5b505afa158015612c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c799190613f6e565b6001600160a01b0385166000908152601460205260409020546005546012549293509091612ca7908461400e565b612cb1919061402d565b612cbb919061404f565b6001600160a01b038516600090815260136020526040812080549295508592909190612ce8908490614268565b90915550506001600160a01b03841660009081526014602052604081208054859290612d15908490614268565b90915550508215612d7a57604080518481526001600160a01b03861660208201527f7ae234f282e32d9045ebb99a2727e371aabe9285ae8f3888388543d61ffea922910160405180910390a16007546001600160a01b0316612d788186866133f2565b505b5050919050565b6002546000906001600160a01b0383811691161480610568575060025460405163d8d9a39160e01b81526001600160a01b03848116600483015291821660248201527f00000000000000000000000000000000000000000000000000000000000000009091169063d8d9a3919060440160206040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190613ee4565b6007546040516370a0823160e01b815230600482015260009182916001600160a01b0390911690829082906370a082319060240160206040518083038186803b158015612e8d57600080fd5b505afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190613f6e565b600b54909150606490612edb9060ff168361400e565b612ee5919061402d565b9250612ef1838261404f565b60408051828152602081018690526001600160a01b0389168183015290519195507ff2eab73588c8e9161f6a438fe2a8b08c31f71f570c0c8ca9c9d200ea098f7455919081900360600190a1600254612f57906001600160a01b038481169116866133f2565b612f6b6001600160a01b03831686856133f2565b50509250929050565b612f7c610e17565b612fbf5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105c6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613071610e17565b156130b15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105c6565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fef3390565b606060006130f98361345e565b9392505050565b6000805b82518161ffff16101561315e578361ffff16838261ffff168151811061312c5761312c613f9d565b602002602001015161ffff16141561314c576131496001836142b8565b91505b8061315681613fec565b915050613104565b5092915050565b61ffff811661317357505050565b600d5461ffff821611156131c95760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964207065726b496400000000000000000000000000000000000060448201526064016105c6565b6000600d6131d8600184613fc9565b61ffff16815481106131ec576131ec613f9d565b60009182526020909120600290910201805490915061ffff640100000000820481166201000090920416116132635760405162461bcd60e51b815260206004820152601260248201527f5065726b206e6f7420617661696c61626c65000000000000000000000000000060448201526064016105c6565b82816001015411156132b75760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e7320746f20636c61696d00000000000060448201526064016105c6565b805460019082906004906132d8908490640100000000900461ffff166142b8565b825461ffff91821661010093840a90810290830219909116179092556001600160a01b0387166000818152600e602090815260408083208054600181018255908452828420601082040180548b89166002600f9485160290980a8881029902191697909717909655928252939093529091206133559250906134ba565b50600b5461010090046001600160a01b0316156133ec57600b5460015460405163396d6e9f60e21b81526001600160a01b038781166004830152602482019290925261ffff8516604482015260648101869052610100909204169063e5b5ba7c90608401600060405180830381600087803b1580156133d357600080fd5b505af11580156133e7573d6000803e3d6000fd5b505050505b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526134599084906134c6565b505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156134ae57602002820191906000526020600020905b81548152602001906001019080831161349a575b50505050509050919050565b60006130f98383613598565b600061351b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135e79092919063ffffffff16565b80519091501561345957808060200190518101906135399190613ee4565b6134595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105c6565b60008181526001830160205260408120546135df57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610568565b506000610568565b60606135f684846000856135fe565b949350505050565b60608247101561365f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105c6565b6001600160a01b0385163b6136b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105c6565b600080866001600160a01b031685876040516136d291906142de565b60006040518083038185875af1925050503d806000811461370f576040519150601f19603f3d011682016040523d82523d6000602084013e613714565b606091505b509150915061372482828661372f565b979650505050505050565b6060831561373e5750816130f9565b82511561374e5782518084602001fd5b8160405162461bcd60e51b81526004016105c691906142fa565b604051806101c001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600060068111156137ca576137ca6138fd565b8152602001606081526020016000815260200160008152602001600060ff16815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b60006020828403121561382157600080fd5b81356001600160e01b0319811681146130f957600080fd5b6001600160a01b0381168114612a4b57600080fd5b60006020828403121561386057600080fd5b81356130f981613839565b6000806040838503121561387e57600080fd5b823561388981613839565b9150602083013561389981613839565b809150509250929050565b8015158114612a4b57600080fd5b6000806000606084860312156138c757600080fd5b83356138d281613839565b925060208401356138e2816138a4565b915060408401356138f281613839565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b6007811061393157634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015613950578181015183820152602001613938565b838111156133ec5750506000910152565b60008151808452613979816020860160208601613935565b601f01601f19169290920160200192915050565b8e81526001600160a01b038e1660208201528c60408201528b60608201528a60808201528960a08201526001600160a01b03891660c08201526139d360e0820189613913565b6101c061010082015260006139ec6101c0830189613961565b90508661012083015285610140830152613a0c61016083018660ff169052565b6001600160a01b0384166101808301526001600160a01b0383166101a08301529f9e505050505050505050505050505050565b600081518084526020808501945080840160005b83811015613a9a578151805161ffff9081168952848201518116858a0152604080830151909116908901526060908101519088015260809096019590820190600101613a53565b509495945050505050565b848152608060208201526000613abe6080830186613a3f565b6040830194909452506060015292915050565b60008060408385031215613ae457600080fd5b82359150602083013561389981613839565b60008060408385031215613b0957600080fd5b8235613b1481613839565b946020939093013593505050565b60006101c0825184526020830151613b4560208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c0830151613b8860c08601826001600160a01b03169052565b5060e0830151613b9b60e0860182613913565b50610100808401518282870152613bb483870182613961565b9250505061012080840151818601525061014080840151818601525061016080840151613be58287018260ff169052565b5050610180838101516001600160a01b03908116918601919091526101a0938401511692909301919091525090565b6020815260006130f96020830184613b22565b60008060008060808587031215613c3d57600080fd5b8435613c4881613839565b93506020850135925060408501359150606085013561ffff81168114613c6d57600080fd5b939692955090935050565b600060208284031215613c8a57600080fd5b5035919050565b600080600080600060a08688031215613ca957600080fd5b8535613cb481613839565b9450602086013593506040860135613ccb81613839565b92506060860135613cdb81613839565b949793965091946080013592915050565b60008083601f840112613cfe57600080fd5b50813567ffffffffffffffff811115613d1657600080fd5b6020830191508360208260051b850101111561149f57600080fd5b60008083601f840112613d4357600080fd5b50813567ffffffffffffffff811115613d5b57600080fd5b60208301915083602082850101111561149f57600080fd5b60008060008060008060008060a0898b031215613d8f57600080fd5b8835613d9a81613839565b97506020890135613daa81613839565b9650604089013567ffffffffffffffff80821115613dc757600080fd5b613dd38c838d01613cec565b909850965060608b0135915080821115613dec57600080fd5b613df88c838d01613cec565b909650945060808b0135915080821115613e1157600080fd5b50613e1e8b828c01613d31565b999c989b5096995094979396929594505050565b606081526000613e456060830186613b22565b8281036020840152613e578186613a3f565b915050826040830152949350505050565b60008060008060008060a08789031215613e8157600080fd5b8635613e8c81613839565b95506020870135613e9c81613839565b94506040870135935060608701359250608087013567ffffffffffffffff811115613ec657600080fd5b613ed289828a01613d31565b979a9699509497509295939492505050565b600060208284031215613ef657600080fd5b81516130f9816138a4565b60608101613f0f8286613913565b613f1c6020830185613913565b6001600160a01b0383166040830152949350505050565b600181811c90821680613f4757607f821691505b60208210811415613f6857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613f8057600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff83811690831681811015613fe457613fe4613fb3565b039392505050565b600061ffff8083168181141561400457614004613fb3565b6001019392505050565b600081600019048311821515161561402857614028613fb3565b500290565b60008261404a57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561406157614061613fb3565b500390565b8054600090600181811c908083168061408057607f831692505b60208084108214156140a257634e487b7160e01b600052602260045260246000fd5b838852602088018280156140bd57600181146140ce576140f9565b60ff198716825282820197506140f9565b60008981526020902060005b878110156140f3578154848201529086019084016140da565b83019850505b5050505050505092915050565b60006001600160a01b03808816835260a06020840152865460a084015261413760018801546001600160a01b031690565b6001600160a01b03811660c085015250600287015460e084015260038701546101008401526004870154610120840152600587015461014084015260068701546001600160a01b038282161661016085015261419d610180850160ff8360a01c16613913565b506101c0806101a08501526141b9610260850160078a01614066565b60088901549185019190915260098801546101e0850152600a88015460ff8116610200860152906141fb6102208601848460081c166001600160a01b03169052565b600b8901546001600160a01b039081166102408701526040860189905260608601889052861660808601529250614230915050565b9695505050505050565b6000806040838503121561424d57600080fd5b825161425881613839565b6020939093015192949293505050565b6000821982111561427b5761427b613fb3565b500190565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261372460a0830184613961565b600061ffff8083168185168083038211156142d5576142d5613fb3565b01949350505050565b600082516142f0818460208701613935565b9190910192915050565b6020815260006130f9602083018461396156fe4e6f7420696e20726571756972656420737461746500000000000000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d8a7de39e65bd28a32b9f0491fa26109d943e2f1151ae3601476743782fb157c64736f6c63430008090033a26469706673582212201a980eea1f12435564d9ee50dbeec02620d0127973b0e4270ba2e79bd5e7ccef64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14400,
        "contract": "contracts/v3/StaxeProductionsFactoryV3.sol:StaxeProductionsFactoryV3",
        "label": "productions",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IProductionsV3)16567"
      },
      {
        "astId": 14403,
        "contract": "contracts/v3/StaxeProductionsFactoryV3.sol:StaxeProductionsFactoryV3",
        "label": "members",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMembersV3)16033"
      },
      {
        "astId": 14406,
        "contract": "contracts/v3/StaxeProductionsFactoryV3.sol:StaxeProductionsFactoryV3",
        "label": "priceCalculationEngine",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceCalculationEngineV3)16079"
      }
    ],
    "types": {
      "t_contract(IMembersV3)16033": {
        "encoding": "inplace",
        "label": "contract IMembersV3",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceCalculationEngineV3)16079": {
        "encoding": "inplace",
        "label": "contract IPriceCalculationEngineV3",
        "numberOfBytes": "20"
      },
      "t_contract(IProductionsV3)16567": {
        "encoding": "inplace",
        "label": "contract IProductionsV3",
        "numberOfBytes": "20"
      }
    }
  }
}